744f302cf5129844deba2fd3b7f583d3
// @ts-nocheck
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get FileProcessor () {
        return FileProcessor;
    },
    get fileProcessor () {
        return fileProcessor;
    }
});
const _events = require("events");
const _fs = require("fs");
const _crypto = require("crypto");
const _path = require("path");
const _admzip = /*#__PURE__*/ _interop_require_default(require("adm-zip"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class FileProcessor extends _events.EventEmitter {
    constructor(config = {}){
        super(), this.processingQueue = new Map();
        this.uploadDir = config.uploadDir || './uploads';
        this.tempDir = config.tempDir || './temp';
        this.maxFileSize = config.maxFileSize || 100 * 1024 * 1024; // 100MB default
        this.allowedMimeTypes = new Set(config.allowedMimeTypes || [
            'image/jpeg',
            'image/png',
            'image/gif',
            'image/webp',
            'application/pdf',
            'text/plain',
            'text/markdown',
            'application/zip',
            'application/json',
            'text/csv',
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ]);
        this.virusScanEnabled = config.virusScanEnabled || false;
        this.ensureDirectories();
    }
    // Upload and process files
    async uploadFile(file, options = {}) {
        const uploadId = this.generateUploadId();
        try {
            // Validate file
            await this.validateFile(file, options);
            // Create processing job
            const job = {
                id: uploadId,
                status: 'uploading',
                file: {
                    name: file.name,
                    size: file.size,
                    type: file.type,
                    lastModified: file.lastModified
                },
                options,
                startedAt: new Date().toISOString(),
                progress: 0
            };
            this.processingQueue.set(uploadId, job);
            this.emit('upload:started', job);
            // Save file to temp location
            const tempPath = await this.saveToTemp(file, uploadId);
            job.tempPath = tempPath;
            job.progress = 25;
            this.emit('upload:progress', job);
            // Virus scan if enabled
            if (this.virusScanEnabled) {
                await this.virusScan(tempPath);
                job.progress = 40;
                this.emit('upload:progress', job);
            }
            // Generate file hash
            const fileHash = await this.generateFileHash(tempPath);
            job.fileHash = fileHash;
            job.progress = 50;
            this.emit('upload:progress', job);
            // Process file based on type
            const processedFiles = await this.processFile(tempPath, file, options);
            job.processedFiles = processedFiles;
            job.progress = 75;
            this.emit('upload:progress', job);
            // Move to final location
            const finalPath = await this.moveToFinal(tempPath, uploadId, file);
            job.finalPath = finalPath;
            job.progress = 90;
            this.emit('upload:progress', job);
            // Generate metadata
            const metadata = await this.generateMetadata(finalPath, file, processedFiles);
            job.metadata = metadata;
            job.progress = 100;
            job.status = 'completed';
            job.completedAt = new Date().toISOString();
            this.emit('upload:completed', job);
            return {
                success: true,
                uploadId,
                file: {
                    path: finalPath,
                    url: this.generateFileUrl(finalPath),
                    hash: fileHash,
                    metadata
                },
                processed: processedFiles
            };
        } catch (error) {
            const job = this.processingQueue.get(uploadId);
            if (job) {
                job.status = 'failed';
                job.error = error.message;
                job.completedAt = new Date().toISOString();
                this.emit('upload:failed', job);
            }
            throw error;
        }
    }
    // Batch upload multiple files
    async uploadMultiple(files, options = {}) {
        const batchId = this.generateUploadId();
        const results = [];
        const errors = [];
        this.emit('batch:started', {
            batchId,
            fileCount: files.length
        });
        // Process files in parallel with concurrency limit
        const concurrency = options.concurrency || 3;
        const chunks = this.chunkArray(files, concurrency);
        for (const chunk of chunks){
            const chunkResults = await Promise.allSettled(chunk.map((file)=>this.uploadFile(file, options)));
            chunkResults.forEach((result, index)=>{
                if (result.status === 'fulfilled') {
                    results.push(result.value);
                } else {
                    errors.push({
                        file: chunk[index].name,
                        error: result.reason.message
                    });
                }
            });
        }
        const batchResult = {
            batchId,
            totalFiles: files.length,
            successful: results.length,
            failed: errors.length,
            results,
            errors
        };
        this.emit('batch:completed', batchResult);
        return batchResult;
    }
    // Create product bundle from uploaded files
    async createBundle(files, bundleOptions) {
        const bundleId = this.generateUploadId();
        try {
            const zip = new _admzip.default();
            const bundleMetadata = {
                id: bundleId,
                name: bundleOptions.name,
                description: bundleOptions.description,
                createdAt: new Date().toISOString(),
                files: []
            };
            // Add files to bundle
            for (const fileRef of files){
                const job = this.processingQueue.get(fileRef.uploadId);
                if (!job || !job.finalPath) continue;
                const fileContent = await _fs.promises.readFile(job.finalPath);
                const fileName = this.sanitizeFileName(job.file.name);
                // Add to ZIP
                zip.addFile(fileName, fileContent);
                // Add to metadata
                bundleMetadata.files.push({
                    name: fileName,
                    originalName: job.file.name,
                    size: job.file.size,
                    type: job.file.type,
                    hash: job.fileHash,
                    metadata: {
                        ...job.metadata,
                        ...fileRef.metadata
                    }
                });
            }
            // Add bundle documentation
            if (bundleOptions.includeReadme) {
                const readme = this.generateBundleReadme(bundleMetadata, bundleOptions);
                zip.addFile('README.md', Buffer.from(readme, 'utf8'));
            }
            if (bundleOptions.includeLicense) {
                const license = this.generateLicense(bundleOptions);
                zip.addFile('LICENSE.txt', Buffer.from(license, 'utf8'));
            }
            // Add metadata file
            zip.addFile('bundle-metadata.json', Buffer.from(JSON.stringify(bundleMetadata, null, 2), 'utf8'));
            // Generate bundle file
            const bundlePath = (0, _path.join)(this.uploadDir, 'bundles', `${bundleId}.zip`);
            await _fs.promises.mkdir((0, _path.join)(this.uploadDir, 'bundles'), {
                recursive: true
            });
            const zipBuffer = zip.toBuffer();
            await _fs.promises.writeFile(bundlePath, zipBuffer);
            // Generate bundle hash
            const bundleHash = await this.generateFileHash(bundlePath);
            const result = {
                bundleId,
                path: bundlePath,
                url: this.generateFileUrl(bundlePath),
                size: zipBuffer.length,
                hash: bundleHash,
                metadata: bundleMetadata,
                downloadUrl: `/api/bundles/download/${bundleId}`
            };
            this.emit('bundle:created', result);
            return result;
        } catch (error) {
            this.emit('bundle:failed', {
                bundleId,
                error: error.message
            });
            throw error;
        }
    }
    // Image processing
    async processImage(imagePath, options = {}) {
        const processed = [];
        const originalName = (0, _path.basename)(imagePath, (0, _path.extname)(imagePath));
        // Generate different sizes if requested
        if (options.generateThumbnails) {
            const sizes = options.thumbnailSizes || [
                {
                    width: 150,
                    height: 150,
                    suffix: 'thumb'
                },
                {
                    width: 400,
                    height: 400,
                    suffix: 'medium'
                },
                {
                    width: 800,
                    height: 600,
                    suffix: 'large'
                }
            ];
            for (const size of sizes){
                const outputPath = (0, _path.join)(this.uploadDir, 'processed', `${originalName}_${size.suffix}${(0, _path.extname)(imagePath)}`);
                await _fs.promises.mkdir((0, _path.join)(this.uploadDir, 'processed'), {
                    recursive: true
                });
                // Mock image processing - replace with actual image library (sharp, jimp, etc.)
                await _fs.promises.copyFile(imagePath, outputPath);
                processed.push({
                    path: outputPath,
                    url: this.generateFileUrl(outputPath),
                    width: size.width,
                    height: size.height,
                    size: (await _fs.promises.stat(outputPath)).size
                });
            }
        }
        // Optimize original if requested
        if (options.optimize) {
            const optimizedPath = (0, _path.join)(this.uploadDir, 'processed', `${originalName}_optimized${(0, _path.extname)(imagePath)}`);
            // Mock optimization - replace with actual optimization
            await _fs.promises.copyFile(imagePath, optimizedPath);
            processed.push({
                path: optimizedPath,
                url: this.generateFileUrl(optimizedPath),
                optimized: true,
                size: (await _fs.promises.stat(optimizedPath)).size
            });
        }
        return processed;
    }
    // Document processing
    async processDocument(docPath, options = {}) {
        const result = {
            path: docPath,
            url: this.generateFileUrl(docPath)
        };
        // Extract text if requested
        if (options.extractText) {
            result.text = await this.extractTextFromDocument(docPath);
        }
        // Generate preview if requested
        if (options.generatePreview) {
            result.preview = await this.generateDocumentPreview(docPath);
        }
        // Convert to PDF if requested and not already PDF
        if (options.convertToPdf && !docPath.toLowerCase().endsWith('.pdf')) {
            result.pdfVersion = await this.convertToPdf(docPath);
        }
        return result;
    }
    // Get upload status
    getUploadStatus(uploadId) {
        return this.processingQueue.get(uploadId) || null;
    }
    // Get all uploads for user
    getUserUploads(userId, options = {}) {
        const userUploads = Array.from(this.processingQueue.values()).filter((job)=>job.options.userId === userId);
        const page = options.page || 1;
        const limit = options.limit || 20;
        const start = (page - 1) * limit;
        const end = start + limit;
        return {
            uploads: userUploads.slice(start, end),
            pagination: {
                page,
                limit,
                total: userUploads.length,
                pages: Math.ceil(userUploads.length / limit)
            }
        };
    }
    // Delete upload
    async deleteUpload(uploadId) {
        const job = this.processingQueue.get(uploadId);
        if (!job) return false;
        try {
            // Delete files
            if (job.tempPath) {
                await _fs.promises.unlink(job.tempPath).catch(()=>{});
            }
            if (job.finalPath) {
                await _fs.promises.unlink(job.finalPath).catch(()=>{});
            }
            if (job.processedFiles) {
                for (const processed of job.processedFiles){
                    if (processed.path) {
                        await _fs.promises.unlink(processed.path).catch(()=>{});
                    }
                }
            }
            // Remove from queue
            this.processingQueue.delete(uploadId);
            this.emit('upload:deleted', {
                uploadId
            });
            return true;
        } catch (error) {
            console.error('Error deleting upload:', error);
            return false;
        }
    }
    // Private methods
    async validateFile(file, options) {
        // Size validation
        if (file.size > this.maxFileSize) {
            throw new Error(`File size ${file.size} exceeds maximum allowed size ${this.maxFileSize}`);
        }
        // MIME type validation
        if (!this.allowedMimeTypes.has(file.type)) {
            throw new Error(`File type ${file.type} is not allowed`);
        }
        // Custom validation
        if (options.validator) {
            const validationResult = await options.validator(file);
            if (!validationResult.valid) {
                throw new Error(validationResult.error || 'File validation failed');
            }
        }
    }
    async saveToTemp(file, uploadId) {
        const tempPath = (0, _path.join)(this.tempDir, `${uploadId}_${file.name}`);
        const buffer = await file.arrayBuffer();
        await _fs.promises.writeFile(tempPath, Buffer.from(buffer));
        return tempPath;
    }
    async virusScan(filePath) {
        // Mock virus scan - integrate with actual antivirus service
        console.log(`Scanning file: ${filePath}`);
        await new Promise((resolve)=>setTimeout(resolve, 100));
    }
    async generateFileHash(filePath) {
        const hash = (0, _crypto.createHash)('sha256');
        const stream = (0, _fs.createReadStream)(filePath);
        return new Promise((resolve, reject)=>{
            stream.on('data', (data)=>hash.update(data));
            stream.on('end', ()=>resolve(hash.digest('hex')));
            stream.on('error', reject);
        });
    }
    async processFile(filePath, file, options) {
        const processed = [];
        // Process based on file type
        if (file.type.startsWith('image/')) {
            if (options.imageProcessing) {
                const imageResults = await this.processImage(filePath, options.imageProcessing);
                processed.push(...imageResults);
            }
        } else if (file.type === 'application/pdf' || file.type.includes('document')) {
            if (options.documentProcessing) {
                const docResult = await this.processDocument(filePath, options.documentProcessing);
                processed.push(docResult);
            }
        }
        return processed;
    }
    async moveToFinal(tempPath, uploadId, file) {
        const finalDir = (0, _path.join)(this.uploadDir, 'files');
        await _fs.promises.mkdir(finalDir, {
            recursive: true
        });
        const finalPath = (0, _path.join)(finalDir, `${uploadId}_${this.sanitizeFileName(file.name)}`);
        await _fs.promises.rename(tempPath, finalPath);
        return finalPath;
    }
    async generateMetadata(filePath, file, processedFiles) {
        const stats = await _fs.promises.stat(filePath);
        return {
            originalName: file.name,
            size: file.size,
            type: file.type,
            lastModified: new Date(file.lastModified).toISOString(),
            uploadedAt: new Date().toISOString(),
            processedCount: processedFiles.length,
            stats: {
                size: stats.size,
                created: stats.birthtime.toISOString(),
                modified: stats.mtime.toISOString()
            }
        };
    }
    generateFileUrl(filePath) {
        const relativePath = filePath.replace(this.uploadDir, '').replace(/\\/g, '/');
        return `${process.env.NEXT_PUBLIC_APP_URL}/api/files${relativePath}`;
    }
    generateUploadId() {
        return `upload_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    sanitizeFileName(fileName) {
        return fileName.replace(/[^a-zA-Z0-9.-]/g, '_');
    }
    chunkArray(array, size) {
        const chunks = [];
        for(let i = 0; i < array.length; i += size){
            chunks.push(array.slice(i, i + size));
        }
        return chunks;
    }
    async ensureDirectories() {
        const dirs = [
            this.uploadDir,
            this.tempDir,
            (0, _path.join)(this.uploadDir, 'files'),
            (0, _path.join)(this.uploadDir, 'processed'),
            (0, _path.join)(this.uploadDir, 'bundles')
        ];
        for (const dir of dirs){
            await _fs.promises.mkdir(dir, {
                recursive: true
            });
        }
    }
    generateBundleReadme(metadata, options) {
        return `# ${metadata.name}

${metadata.description || 'Digital product bundle'}

## Contents

${metadata.files.map((file)=>`- ${file.name} (${file.type})`).join('\n')}

## Created

${new Date(metadata.createdAt).toLocaleDateString()}

## License

${options.license || 'All rights reserved'}
`;
    }
    generateLicense(options) {
        return options.licenseText || `Digital Product License

This digital product is licensed for personal and commercial use.
Redistribution is not permitted without explicit permission.

Created: ${new Date().toLocaleDateString()}
`;
    }
    // Mock implementations for document processing
    async extractTextFromDocument(docPath) {
        // Mock text extraction - integrate with actual document processing library
        return 'Extracted text content...';
    }
    async generateDocumentPreview(docPath) {
        // Mock preview generation
        return `/api/files/previews/${(0, _path.basename)(docPath)}.png`;
    }
    async convertToPdf(docPath) {
        // Mock PDF conversion
        const pdfPath = docPath.replace((0, _path.extname)(docPath), '.pdf');
        await _fs.promises.copyFile(docPath, pdfPath);
        return pdfPath;
    }
}
const fileProcessor = new FileProcessor();

//# sourceMappingURL=data:application/json;base64,