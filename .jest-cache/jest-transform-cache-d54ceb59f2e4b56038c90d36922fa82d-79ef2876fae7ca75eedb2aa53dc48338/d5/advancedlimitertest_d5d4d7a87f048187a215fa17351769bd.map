{"version":3,"sources":["C:\\Users\\Micha\\Favorites\\Downloads\\omnipreneur\\__tests__\\lib\\rate-limit\\advanced-limiter.test.ts"],"sourcesContent":["// @ts-nocheck\r\nimport { AdvancedRateLimiter } from '@/lib/rate-limit/advanced-limiter'\r\n\r\ndescribe('AdvancedRateLimiter', () => {\r\n  let limiter: AdvancedRateLimiter\r\n\r\n  beforeEach(() => {\r\n    limiter = new AdvancedRateLimiter()\r\n  })\r\n\r\n  afterEach(() => {\r\n    limiter.destroy()\r\n  })\r\n\r\n  describe('Basic Rate Limiting', () => {\r\n    beforeEach(() => {\r\n      limiter.addRule({\r\n        name: 'test_rule',\r\n        endpoint: '/test',\r\n        limit: 3,\r\n        window: 60000, // 1 minute\r\n        algorithm: 'sliding_window',\r\n        priority: 1\r\n      })\r\n    })\r\n\r\n    it('should allow requests within limit', async () => {\r\n      const request = {\r\n        ip: '192.168.1.1',\r\n        endpoint: '/test',\r\n        method: 'GET'\r\n      }\r\n\r\n      const result1 = await limiter.checkLimit(request)\r\n      const result2 = await limiter.checkLimit(request)\r\n      const result3 = await limiter.checkLimit(request)\r\n\r\n      expect(result1.allowed).toBe(true)\r\n      expect(result2.allowed).toBe(true)\r\n      expect(result3.allowed).toBe(true)\r\n      expect(result3.remaining).toBe(0)\r\n    })\r\n\r\n    it('should block requests exceeding limit', async () => {\r\n      const request = {\r\n        ip: '192.168.1.1',\r\n        endpoint: '/test',\r\n        method: 'GET'\r\n      }\r\n\r\n      // Use up the limit\r\n      await limiter.checkLimit(request)\r\n      await limiter.checkLimit(request)\r\n      await limiter.checkLimit(request)\r\n\r\n      // This should be blocked\r\n      const result = await limiter.checkLimit(request)\r\n\r\n      expect(result.allowed).toBe(false)\r\n      expect(result.reason).toBe('RATE_LIMIT_EXCEEDED')\r\n      expect(result.retryAfter).toBeGreaterThan(0)\r\n    })\r\n\r\n    it('should track remaining requests correctly', async () => {\r\n      const request = {\r\n        ip: '192.168.1.1',\r\n        endpoint: '/test',\r\n        method: 'GET'\r\n      }\r\n\r\n      const result1 = await limiter.checkLimit(request)\r\n      const result2 = await limiter.checkLimit(request)\r\n\r\n      expect(result1.remaining).toBe(2)\r\n      expect(result2.remaining).toBe(1)\r\n    })\r\n  })\r\n\r\n  describe('Multiple Algorithms', () => {\r\n    it('should work with sliding window algorithm', async () => {\r\n      limiter.addRule({\r\n        name: 'sliding_test',\r\n        endpoint: '/sliding',\r\n        limit: 2,\r\n        window: 1000,\r\n        algorithm: 'sliding_window'\r\n      })\r\n\r\n      const request = {\r\n        ip: '192.168.1.1',\r\n        endpoint: '/sliding',\r\n        method: 'GET'\r\n      }\r\n\r\n      const result1 = await limiter.checkLimit(request)\r\n      const result2 = await limiter.checkLimit(request)\r\n      const result3 = await limiter.checkLimit(request)\r\n\r\n      expect(result1.allowed).toBe(true)\r\n      expect(result2.allowed).toBe(true)\r\n      expect(result3.allowed).toBe(false)\r\n    })\r\n\r\n    it('should work with token bucket algorithm', async () => {\r\n      limiter.addRule({\r\n        name: 'bucket_test',\r\n        endpoint: '/bucket',\r\n        limit: 2,\r\n        window: 1000,\r\n        algorithm: 'token_bucket'\r\n      })\r\n\r\n      const request = {\r\n        ip: '192.168.1.1',\r\n        endpoint: '/bucket',\r\n        method: 'GET'\r\n      }\r\n\r\n      const result1 = await limiter.checkLimit(request)\r\n      const result2 = await limiter.checkLimit(request)\r\n      const result3 = await limiter.checkLimit(request)\r\n\r\n      expect(result1.allowed).toBe(true)\r\n      expect(result2.allowed).toBe(true)\r\n      expect(result3.allowed).toBe(false)\r\n    })\r\n\r\n    it('should work with fixed window algorithm', async () => {\r\n      limiter.addRule({\r\n        name: 'fixed_test',\r\n        endpoint: '/fixed',\r\n        limit: 2,\r\n        window: 1000,\r\n        algorithm: 'fixed_window'\r\n      })\r\n\r\n      const request = {\r\n        ip: '192.168.1.1',\r\n        endpoint: '/fixed',\r\n        method: 'GET'\r\n      }\r\n\r\n      const result1 = await limiter.checkLimit(request)\r\n      const result2 = await limiter.checkLimit(request)\r\n      const result3 = await limiter.checkLimit(request)\r\n\r\n      expect(result1.allowed).toBe(true)\r\n      expect(result2.allowed).toBe(true)\r\n      expect(result3.allowed).toBe(false)\r\n    })\r\n  })\r\n\r\n  describe('Burst Protection', () => {\r\n    beforeEach(() => {\r\n      limiter.addRule({\r\n        name: 'burst_test',\r\n        endpoint: '/burst',\r\n        limit: 10,\r\n        window: 60000,\r\n        algorithm: 'sliding_window',\r\n        burstProtection: {\r\n          limit: 2,\r\n          window: 1000\r\n        }\r\n      })\r\n    })\r\n\r\n    it('should block burst requests', async () => {\r\n      const request = {\r\n        ip: '192.168.1.1',\r\n        endpoint: '/burst',\r\n        method: 'GET'\r\n      }\r\n\r\n      const result1 = await limiter.checkLimit(request)\r\n      const result2 = await limiter.checkLimit(request)\r\n      const result3 = await limiter.checkLimit(request)\r\n\r\n      expect(result1.allowed).toBe(true)\r\n      expect(result2.allowed).toBe(true)\r\n      expect(result3.allowed).toBe(false)\r\n      expect(result3.reason).toBe('BURST_LIMIT_EXCEEDED')\r\n    })\r\n  })\r\n\r\n  describe('Whitelist/Blacklist', () => {\r\n    it('should bypass limits for whitelisted IPs', async () => {\r\n      limiter.addRule({\r\n        name: 'whitelist_test',\r\n        endpoint: '/whitelist',\r\n        limit: 1,\r\n        window: 60000,\r\n        algorithm: 'sliding_window'\r\n      })\r\n\r\n      limiter.addToWhitelist('192.168.1.100')\r\n\r\n      const request = {\r\n        ip: '192.168.1.100',\r\n        endpoint: '/whitelist',\r\n        method: 'GET'\r\n      }\r\n\r\n      // Should allow unlimited requests\r\n      const result1 = await limiter.checkLimit(request)\r\n      const result2 = await limiter.checkLimit(request)\r\n      const result3 = await limiter.checkLimit(request)\r\n\r\n      expect(result1.allowed).toBe(true)\r\n      expect(result1.reason).toBe('WHITELISTED')\r\n      expect(result2.allowed).toBe(true)\r\n      expect(result3.allowed).toBe(true)\r\n    })\r\n\r\n    it('should block blacklisted IPs', async () => {\r\n      limiter.addToBlacklist('192.168.1.200')\r\n\r\n      const request = {\r\n        ip: '192.168.1.200',\r\n        endpoint: '/test',\r\n        method: 'GET'\r\n      }\r\n\r\n      const result = await limiter.checkLimit(request)\r\n\r\n      expect(result.allowed).toBe(false)\r\n      expect(result.reason).toBe('IP_BLACKLISTED')\r\n    })\r\n\r\n    it('should remove IPs from whitelist', async () => {\r\n      limiter.addToWhitelist('192.168.1.100')\r\n      limiter.removeFromWhitelist('192.168.1.100')\r\n\r\n      limiter.addRule({\r\n        name: 'remove_test',\r\n        endpoint: '/remove',\r\n        limit: 1,\r\n        window: 60000,\r\n        algorithm: 'sliding_window'\r\n      })\r\n\r\n      const request = {\r\n        ip: '192.168.1.100',\r\n        endpoint: '/remove',\r\n        method: 'GET'\r\n      }\r\n\r\n      // Should now be subject to rate limits\r\n      const result1 = await limiter.checkLimit(request)\r\n      const result2 = await limiter.checkLimit(request)\r\n\r\n      expect(result1.allowed).toBe(true)\r\n      expect(result2.allowed).toBe(false)\r\n    })\r\n  })\r\n\r\n  describe('Rule Priority', () => {\r\n    beforeEach(() => {\r\n      limiter.addRule({\r\n        name: 'low_priority',\r\n        endpoint: '/priority',\r\n        limit: 10,\r\n        window: 60000,\r\n        algorithm: 'sliding_window',\r\n        priority: 1\r\n      })\r\n\r\n      limiter.addRule({\r\n        name: 'high_priority',\r\n        endpoint: '/priority',\r\n        limit: 2,\r\n        window: 60000,\r\n        algorithm: 'sliding_window',\r\n        priority: 10\r\n      })\r\n    })\r\n\r\n    it('should apply highest priority rule first', async () => {\r\n      const request = {\r\n        ip: '192.168.1.1',\r\n        endpoint: '/priority',\r\n        method: 'GET'\r\n      }\r\n\r\n      const result1 = await limiter.checkLimit(request)\r\n      const result2 = await limiter.checkLimit(request)\r\n      const result3 = await limiter.checkLimit(request)\r\n\r\n      expect(result1.allowed).toBe(true)\r\n      expect(result2.allowed).toBe(true)\r\n      expect(result3.allowed).toBe(false) // Blocked by high priority rule (limit: 2)\r\n    })\r\n  })\r\n\r\n  describe('Endpoint Matching', () => {\r\n    beforeEach(() => {\r\n      limiter.addRule({\r\n        name: 'exact_match',\r\n        endpoint: '/api/users',\r\n        limit: 2,\r\n        window: 60000,\r\n        algorithm: 'sliding_window'\r\n      })\r\n\r\n      limiter.addRule({\r\n        name: 'wildcard_match',\r\n        endpoint: '/api/auth/*',\r\n        limit: 1,\r\n        window: 60000,\r\n        algorithm: 'sliding_window'\r\n      })\r\n    })\r\n\r\n    it('should match exact endpoints', async () => {\r\n      const request = {\r\n        ip: '192.168.1.1',\r\n        endpoint: '/api/users',\r\n        method: 'GET'\r\n      }\r\n\r\n      const result1 = await limiter.checkLimit(request)\r\n      const result2 = await limiter.checkLimit(request)\r\n      const result3 = await limiter.checkLimit(request)\r\n\r\n      expect(result1.allowed).toBe(true)\r\n      expect(result2.allowed).toBe(true)\r\n      expect(result3.allowed).toBe(false)\r\n    })\r\n\r\n    it('should match wildcard endpoints', async () => {\r\n      const request = {\r\n        ip: '192.168.1.1',\r\n        endpoint: '/api/auth/login',\r\n        method: 'POST'\r\n      }\r\n\r\n      const result1 = await limiter.checkLimit(request)\r\n      const result2 = await limiter.checkLimit(request)\r\n\r\n      expect(result1.allowed).toBe(true)\r\n      expect(result2.allowed).toBe(false)\r\n    })\r\n\r\n    it('should not match unrelated endpoints', async () => {\r\n      const request = {\r\n        ip: '192.168.1.1',\r\n        endpoint: '/different/path',\r\n        method: 'GET'\r\n      }\r\n\r\n      // Should only match global rules (if any)\r\n      const result = await limiter.checkLimit(request)\r\n      expect(result.allowed).toBe(true) // No specific rules match\r\n    })\r\n  })\r\n\r\n  describe('User-based Rate Limiting', () => {\r\n    beforeEach(() => {\r\n      limiter.addRule({\r\n        name: 'user_test',\r\n        endpoint: '/user',\r\n        limit: 2,\r\n        window: 60000,\r\n        algorithm: 'sliding_window'\r\n      })\r\n    })\r\n\r\n    it('should rate limit by user ID when provided', async () => {\r\n      const request1 = {\r\n        ip: '192.168.1.1',\r\n        userId: 'user_123',\r\n        endpoint: '/user',\r\n        method: 'GET'\r\n      }\r\n\r\n      const request2 = {\r\n        ip: '192.168.1.1',\r\n        userId: 'user_456',\r\n        endpoint: '/user',\r\n        method: 'GET'\r\n      }\r\n\r\n      // Same IP, different users - should be tracked separately\r\n      const result1a = await limiter.checkLimit(request1)\r\n      const result1b = await limiter.checkLimit(request1)\r\n      const result1c = await limiter.checkLimit(request1)\r\n\r\n      const result2a = await limiter.checkLimit(request2)\r\n      const result2b = await limiter.checkLimit(request2)\r\n\r\n      expect(result1a.allowed).toBe(true)\r\n      expect(result1b.allowed).toBe(true)\r\n      expect(result1c.allowed).toBe(false) // user_123 exceeded limit\r\n\r\n      expect(result2a.allowed).toBe(true) // user_456 still has quota\r\n      expect(result2b.allowed).toBe(true)\r\n    })\r\n  })\r\n\r\n  describe('Statistics', () => {\r\n    beforeEach(() => {\r\n      limiter.addRule({\r\n        name: 'stats_test',\r\n        endpoint: '/stats',\r\n        limit: 2,\r\n        window: 60000,\r\n        algorithm: 'sliding_window'\r\n      })\r\n    })\r\n\r\n    it('should provide rate limiting statistics', async () => {\r\n      const request = {\r\n        ip: '192.168.1.1',\r\n        endpoint: '/stats',\r\n        method: 'GET'\r\n      }\r\n\r\n      // Generate some traffic\r\n      await limiter.checkLimit(request)\r\n      await limiter.checkLimit(request)\r\n      await limiter.checkLimit(request) // This should be blocked\r\n\r\n      const stats = await limiter.getStatistics('1h')\r\n\r\n      expect(stats).toMatchObject({\r\n        totalRequests: expect.any(Number),\r\n        blockedRequests: expect.any(Number),\r\n        topBlockedIPs: expect.any(Array),\r\n        topBlockedEndpoints: expect.any(Array),\r\n        rules: expect.any(Array)\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('Error Handling', () => {\r\n    it('should handle invalid rules gracefully', () => {\r\n      expect(() => {\r\n        limiter.addRule({\r\n          name: 'invalid_rule',\r\n          endpoint: '/invalid',\r\n          limit: -1, // Invalid limit\r\n          window: 0, // Invalid window\r\n          algorithm: 'invalid_algorithm' as any\r\n        })\r\n      }).not.toThrow()\r\n    })\r\n\r\n    it('should handle malformed requests', async () => {\r\n      const request = {\r\n        ip: '', // Empty IP\r\n        endpoint: '', // Empty endpoint\r\n        method: ''\r\n      }\r\n\r\n      const result = await limiter.checkLimit(request)\r\n      expect(result).toMatchObject({\r\n        allowed: expect.any(Boolean)\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('Memory Management', () => {\r\n    it('should clean up old data', () => {\r\n      // Add some data\r\n      limiter.addRule({\r\n        name: 'cleanup_test',\r\n        endpoint: '/cleanup',\r\n        limit: 100,\r\n        window: 1000, // Short window for testing\r\n        algorithm: 'sliding_window'\r\n      })\r\n\r\n      // Simulate cleanup\r\n      expect(() => {\r\n        limiter['cleanup']()\r\n      }).not.toThrow()\r\n    })\r\n  })\r\n\r\n  describe('Event Emission', () => {\r\n    beforeEach(() => {\r\n      limiter.addRule({\r\n        name: 'event_test',\r\n        endpoint: '/events',\r\n        limit: 1,\r\n        window: 60000,\r\n        algorithm: 'sliding_window'\r\n      })\r\n    })\r\n\r\n    it('should emit rate limit events', (done) => {\r\n      limiter.on('rateLimit:exceeded', (data) => {\r\n        expect(data.rule).toBe('event_test')\r\n        expect(data.identifier).toBe('192.168.1.1')\r\n        done()\r\n      })\r\n\r\n      const request = {\r\n        ip: '192.168.1.1',\r\n        endpoint: '/events',\r\n        method: 'GET'\r\n      }\r\n\r\n      // Use up limit and trigger event\r\n      limiter.checkLimit(request).then(() => {\r\n        limiter.checkLimit(request) // This should trigger the event\r\n      })\r\n    })\r\n  })\r\n})"],"names":["describe","limiter","beforeEach","AdvancedRateLimiter","afterEach","destroy","addRule","name","endpoint","limit","window","algorithm","priority","it","request","ip","method","result1","checkLimit","result2","result3","expect","allowed","toBe","remaining","result","reason","retryAfter","toBeGreaterThan","burstProtection","addToWhitelist","addToBlacklist","removeFromWhitelist","request1","userId","request2","result1a","result1b","result1c","result2a","result2b","stats","getStatistics","toMatchObject","totalRequests","any","Number","blockedRequests","topBlockedIPs","Array","topBlockedEndpoints","rules","not","toThrow","Boolean","done","on","data","rule","identifier","then"],"mappings":"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"}