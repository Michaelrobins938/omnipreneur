{"version":3,"sources":["C:\\Users\\Micha\\Favorites\\Downloads\\omnipreneur\\__tests__\\api\\upload\\route.test.ts"],"sourcesContent":["// @ts-nocheck\r\nimport { POST, GET, DELETE } from '@/app/api/upload/route'\r\nimport { fileProcessor } from '@/lib/upload/file-processor'\r\n\r\n// Mock dependencies\r\njest.mock('@/lib/upload/file-processor')\r\njest.mock('@/lib/auth', () => ({\r\n  requireAuth: (handler: any) => handler\r\n}))\r\n\r\ndescribe('/api/upload', () => {\r\n  let mockRequest: any\r\n  let mockUser: any\r\n\r\n  beforeEach(() => {\r\n    mockUser = {\r\n      userId: 'user_123',\r\n      email: 'test@example.com'\r\n    }\r\n\r\n    mockRequest = {\r\n      user: mockUser,\r\n      formData: jest.fn(),\r\n      json: jest.fn(),\r\n      nextUrl: { searchParams: new URLSearchParams() }\r\n    }\r\n\r\n    // Reset mocks\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  describe('POST /api/upload', () => {\r\n    beforeEach(() => {\r\n      mockRequest.formData.mockResolvedValue(new FormData())\r\n    })\r\n\r\n    it('should handle single file upload successfully', async () => {\r\n      const mockFile = global.testUtils.createMockFile('test.txt', 'content')\r\n      const formData = new FormData()\r\n      formData.append('files', mockFile)\r\n      \r\n      mockRequest.formData.mockResolvedValue(formData)\r\n\r\n      const mockUploadResult = {\r\n        success: true,\r\n        uploadId: 'upload_123',\r\n        file: {\r\n          path: '/uploads/test.txt',\r\n          url: 'http://localhost:3000/uploads/test.txt',\r\n          hash: 'abc123',\r\n          metadata: {}\r\n        },\r\n        processed: []\r\n      }\r\n\r\n      ;(fileProcessor.uploadFile as jest.Mock).mockResolvedValue(mockUploadResult)\r\n\r\n      const response = await POST(mockRequest)\r\n      const responseData = await response.json()\r\n\r\n      expect(response.status).toBe(200)\r\n      expect(responseData.success).toBe(true)\r\n      expect(responseData.data.upload).toEqual(mockUploadResult)\r\n      expect(fileProcessor.uploadFile).toHaveBeenCalledWith(\r\n        mockFile,\r\n        expect.objectContaining({\r\n          userId: 'user_123'\r\n        })\r\n      )\r\n    })\r\n\r\n    it('should handle multiple file upload', async () => {\r\n      const file1 = global.testUtils.createMockFile('test1.txt')\r\n      const file2 = global.testUtils.createMockFile('test2.txt')\r\n      const formData = new FormData()\r\n      formData.append('files', file1)\r\n      formData.append('files', file2)\r\n      \r\n      mockRequest.formData.mockResolvedValue(formData)\r\n\r\n      const mockBatchResult = {\r\n        batchId: 'batch_123',\r\n        totalFiles: 2,\r\n        successful: 2,\r\n        failed: 0,\r\n        results: [],\r\n        errors: []\r\n      }\r\n\r\n      ;(fileProcessor.uploadMultiple as jest.Mock).mockResolvedValue(mockBatchResult)\r\n\r\n      const response = await POST(mockRequest)\r\n      const responseData = await response.json()\r\n\r\n      expect(response.status).toBe(200)\r\n      expect(responseData.success).toBe(true)\r\n      expect(responseData.data.batch).toEqual(mockBatchResult)\r\n      expect(fileProcessor.uploadMultiple).toHaveBeenCalled()\r\n    })\r\n\r\n    it('should reject when no files provided', async () => {\r\n      const formData = new FormData()\r\n      mockRequest.formData.mockResolvedValue(formData)\r\n\r\n      const response = await POST(mockRequest)\r\n      const responseData = await response.json()\r\n\r\n      expect(response.status).toBe(400)\r\n      expect(responseData.success).toBe(false)\r\n      expect(responseData.error.code).toBe('NO_FILES')\r\n    })\r\n\r\n    it('should enforce file count limits', async () => {\r\n      const formData = new FormData()\r\n      formData.set('config', JSON.stringify({ maxFiles: 2 }))\r\n      \r\n      // Add 3 files (exceeds limit)\r\n      for (let i = 0; i < 3; i++) {\r\n        formData.append('files', global.testUtils.createMockFile(`test${i}.txt`))\r\n      }\r\n      \r\n      mockRequest.formData.mockResolvedValue(formData)\r\n\r\n      const response = await POST(mockRequest)\r\n      const responseData = await response.json()\r\n\r\n      expect(response.status).toBe(400)\r\n      expect(responseData.error.code).toBe('TOO_MANY_FILES')\r\n    })\r\n\r\n    it('should handle upload errors', async () => {\r\n      const mockFile = global.testUtils.createMockFile('test.txt')\r\n      const formData = new FormData()\r\n      formData.append('files', mockFile)\r\n      \r\n      mockRequest.formData.mockResolvedValue(formData)\r\n      ;(fileProcessor.uploadFile as jest.Mock).mockRejectedValue(new Error('Upload failed'))\r\n\r\n      const response = await POST(mockRequest)\r\n      const responseData = await response.json()\r\n\r\n      expect(response.status).toBe(500)\r\n      expect(responseData.success).toBe(false)\r\n      expect(responseData.error.code).toBe('UPLOAD_ERROR')\r\n    })\r\n\r\n    it('should validate upload configuration', async () => {\r\n      const formData = new FormData()\r\n      formData.set('config', 'invalid json')\r\n      formData.append('files', global.testUtils.createMockFile('test.txt'))\r\n      \r\n      mockRequest.formData.mockResolvedValue(formData)\r\n\r\n      const response = await POST(mockRequest)\r\n      const responseData = await response.json()\r\n\r\n      expect(response.status).toBe(500)\r\n      expect(responseData.success).toBe(false)\r\n    })\r\n  })\r\n\r\n  describe('GET /api/upload', () => {\r\n    it('should get specific upload status', async () => {\r\n      mockRequest.nextUrl.searchParams.set('uploadId', 'upload_123')\r\n\r\n      const mockUploadStatus = {\r\n        id: 'upload_123',\r\n        status: 'completed',\r\n        file: { name: 'test.txt' },\r\n        options: { userId: 'user_123' },\r\n        progress: 100\r\n      }\r\n\r\n      ;(fileProcessor.getUploadStatus as jest.Mock).mockReturnValue(mockUploadStatus)\r\n\r\n      const response = await GET(mockRequest)\r\n      const responseData = await response.json()\r\n\r\n      expect(response.status).toBe(200)\r\n      expect(responseData.success).toBe(true)\r\n      expect(responseData.data.upload).toEqual(mockUploadStatus)\r\n    })\r\n\r\n    it('should return 404 for non-existent upload', async () => {\r\n      mockRequest.nextUrl.searchParams.set('uploadId', 'nonexistent')\r\n      ;(fileProcessor.getUploadStatus as jest.Mock).mockReturnValue(null)\r\n\r\n      const response = await GET(mockRequest)\r\n      const responseData = await response.json()\r\n\r\n      expect(response.status).toBe(404)\r\n      expect(responseData.error.code).toBe('UPLOAD_NOT_FOUND')\r\n    })\r\n\r\n    it('should deny access to other users uploads', async () => {\r\n      mockRequest.nextUrl.searchParams.set('uploadId', 'upload_123')\r\n\r\n      const mockUploadStatus = {\r\n        id: 'upload_123',\r\n        options: { userId: 'other_user' } // Different user\r\n      }\r\n\r\n      ;(fileProcessor.getUploadStatus as jest.Mock).mockReturnValue(mockUploadStatus)\r\n\r\n      const response = await GET(mockRequest)\r\n      const responseData = await response.json()\r\n\r\n      expect(response.status).toBe(403)\r\n      expect(responseData.error.code).toBe('ACCESS_DENIED')\r\n    })\r\n\r\n    it('should get user uploads list', async () => {\r\n      mockRequest.nextUrl.searchParams.set('page', '1')\r\n      mockRequest.nextUrl.searchParams.set('limit', '10')\r\n\r\n      const mockUploads = {\r\n        uploads: [\r\n          { id: 'upload_1', file: { name: 'file1.txt' } },\r\n          { id: 'upload_2', file: { name: 'file2.txt' } }\r\n        ],\r\n        pagination: {\r\n          page: 1,\r\n          limit: 10,\r\n          total: 2,\r\n          pages: 1\r\n        }\r\n      }\r\n\r\n      ;(fileProcessor.getUserUploads as jest.Mock).mockReturnValue(mockUploads)\r\n\r\n      const response = await GET(mockRequest)\r\n      const responseData = await response.json()\r\n\r\n      expect(response.status).toBe(200)\r\n      expect(responseData.success).toBe(true)\r\n      expect(responseData.data.uploads).toEqual(mockUploads.uploads)\r\n      expect(responseData.data.pagination).toEqual(mockUploads.pagination)\r\n    })\r\n  })\r\n\r\n  describe('DELETE /api/upload', () => {\r\n    it('should delete upload successfully', async () => {\r\n      mockRequest.nextUrl.searchParams.set('uploadId', 'upload_123')\r\n\r\n      const mockUploadStatus = {\r\n        id: 'upload_123',\r\n        options: { userId: 'user_123' }\r\n      }\r\n\r\n      ;(fileProcessor.getUploadStatus as jest.Mock).mockReturnValue(mockUploadStatus)\r\n      ;(fileProcessor.deleteUpload as jest.Mock).mockResolvedValue(true)\r\n\r\n      const response = await DELETE(mockRequest)\r\n      const responseData = await response.json()\r\n\r\n      expect(response.status).toBe(200)\r\n      expect(responseData.success).toBe(true)\r\n      expect(fileProcessor.deleteUpload).toHaveBeenCalledWith('upload_123')\r\n    })\r\n\r\n    it('should require uploadId parameter', async () => {\r\n      const response = await DELETE(mockRequest)\r\n      const responseData = await response.json()\r\n\r\n      expect(response.status).toBe(400)\r\n      expect(responseData.error.code).toBe('MISSING_UPLOAD_ID')\r\n    })\r\n\r\n    it('should return 404 for non-existent upload', async () => {\r\n      mockRequest.nextUrl.searchParams.set('uploadId', 'nonexistent')\r\n      ;(fileProcessor.getUploadStatus as jest.Mock).mockReturnValue(null)\r\n\r\n      const response = await DELETE(mockRequest)\r\n      const responseData = await response.json()\r\n\r\n      expect(response.status).toBe(404)\r\n      expect(responseData.error.code).toBe('UPLOAD_NOT_FOUND')\r\n    })\r\n\r\n    it('should deny access to other users uploads', async () => {\r\n      mockRequest.nextUrl.searchParams.set('uploadId', 'upload_123')\r\n\r\n      const mockUploadStatus = {\r\n        id: 'upload_123',\r\n        options: { userId: 'other_user' }\r\n      }\r\n\r\n      ;(fileProcessor.getUploadStatus as jest.Mock).mockReturnValue(mockUploadStatus)\r\n\r\n      const response = await DELETE(mockRequest)\r\n      const responseData = await response.json()\r\n\r\n      expect(response.status).toBe(403)\r\n      expect(responseData.error.code).toBe('ACCESS_DENIED')\r\n    })\r\n\r\n    it('should handle deletion failures', async () => {\r\n      mockRequest.nextUrl.searchParams.set('uploadId', 'upload_123')\r\n\r\n      const mockUploadStatus = {\r\n        id: 'upload_123',\r\n        options: { userId: 'user_123' }\r\n      }\r\n\r\n      ;(fileProcessor.getUploadStatus as jest.Mock).mockReturnValue(mockUploadStatus)\r\n      ;(fileProcessor.deleteUpload as jest.Mock).mockResolvedValue(false)\r\n\r\n      const response = await DELETE(mockRequest)\r\n      const responseData = await response.json()\r\n\r\n      expect(response.status).toBe(500)\r\n      expect(responseData.error.code).toBe('DELETE_FAILED')\r\n    })\r\n  })\r\n\r\n  describe('File Processing Configuration', () => {\r\n    it('should configure image processing options', async () => {\r\n      const mockFile = global.testUtils.createMockFile('image.jpg', 'image content', 'image/jpeg')\r\n      const formData = new FormData()\r\n      formData.append('files', mockFile)\r\n      formData.set('config', JSON.stringify({\r\n        processImages: true,\r\n        generateThumbnails: true\r\n      }))\r\n      \r\n      mockRequest.formData.mockResolvedValue(formData)\r\n\r\n      const mockUploadResult = {\r\n        success: true,\r\n        uploadId: 'upload_123',\r\n        file: { path: '/test', url: '/test', hash: 'abc', metadata: {} },\r\n        processed: []\r\n      }\r\n\r\n      ;(fileProcessor.uploadFile as jest.Mock).mockResolvedValue(mockUploadResult)\r\n\r\n      await POST(mockRequest)\r\n\r\n      expect(fileProcessor.uploadFile).toHaveBeenCalledWith(\r\n        mockFile,\r\n        expect.objectContaining({\r\n          imageProcessing: expect.objectContaining({\r\n            generateThumbnails: true,\r\n            thumbnailSizes: expect.any(Array),\r\n            optimize: true\r\n          })\r\n        })\r\n      )\r\n    })\r\n\r\n    it('should configure document processing options', async () => {\r\n      const mockFile = global.testUtils.createMockFile('doc.pdf', 'pdf content', 'application/pdf')\r\n      const formData = new FormData()\r\n      formData.append('files', mockFile)\r\n      formData.set('config', JSON.stringify({\r\n        processDocuments: true,\r\n        extractText: true\r\n      }))\r\n      \r\n      mockRequest.formData.mockResolvedValue(formData)\r\n\r\n      const mockUploadResult = {\r\n        success: true,\r\n        uploadId: 'upload_123',\r\n        file: { path: '/test', url: '/test', hash: 'abc', metadata: {} },\r\n        processed: []\r\n      }\r\n\r\n      ;(fileProcessor.uploadFile as jest.Mock).mockResolvedValue(mockUploadResult)\r\n\r\n      await POST(mockRequest)\r\n\r\n      expect(fileProcessor.uploadFile).toHaveBeenCalledWith(\r\n        mockFile,\r\n        expect.objectContaining({\r\n          documentProcessing: expect.objectContaining({\r\n            extractText: true,\r\n            generatePreview: true\r\n          })\r\n        })\r\n      )\r\n    })\r\n  })\r\n})"],"names":["jest","mock","requireAuth","handler","describe","mockRequest","mockUser","beforeEach","userId","email","user","formData","fn","json","nextUrl","searchParams","URLSearchParams","clearAllMocks","mockResolvedValue","FormData","it","mockFile","global","testUtils","createMockFile","append","mockUploadResult","success","uploadId","file","path","url","hash","metadata","processed","fileProcessor","uploadFile","response","POST","responseData","expect","status","toBe","data","upload","toEqual","toHaveBeenCalledWith","objectContaining","file1","file2","mockBatchResult","batchId","totalFiles","successful","failed","results","errors","uploadMultiple","batch","toHaveBeenCalled","error","code","set","JSON","stringify","maxFiles","i","mockRejectedValue","Error","mockUploadStatus","id","name","options","progress","getUploadStatus","mockReturnValue","GET","mockUploads","uploads","pagination","page","limit","total","pages","getUserUploads","deleteUpload","DELETE","processImages","generateThumbnails","imageProcessing","thumbnailSizes","any","Array","optimize","processDocuments","extractText","documentProcessing","generatePreview"],"mappings":"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"}