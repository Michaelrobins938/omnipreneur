0b94ec62bd185b20521520d97a555081
// @ts-nocheck
"use strict";
// Mock dependencies
jest.mock('@/lib/upload/file-processor');
jest.mock('@/lib/auth', ()=>({
        requireAuth: (handler)=>handler
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _route = require("../../../app/api/upload/route");
const _fileprocessor = require("../../../lib/upload/file-processor");
describe('/api/upload', ()=>{
    let mockRequest;
    let mockUser;
    beforeEach(()=>{
        mockUser = {
            userId: 'user_123',
            email: 'test@example.com'
        };
        mockRequest = {
            user: mockUser,
            formData: jest.fn(),
            json: jest.fn(),
            nextUrl: {
                searchParams: new URLSearchParams()
            }
        };
        // Reset mocks
        jest.clearAllMocks();
    });
    describe('POST /api/upload', ()=>{
        beforeEach(()=>{
            mockRequest.formData.mockResolvedValue(new FormData());
        });
        it('should handle single file upload successfully', async ()=>{
            const mockFile = global.testUtils.createMockFile('test.txt', 'content');
            const formData = new FormData();
            formData.append('files', mockFile);
            mockRequest.formData.mockResolvedValue(formData);
            const mockUploadResult = {
                success: true,
                uploadId: 'upload_123',
                file: {
                    path: '/uploads/test.txt',
                    url: 'http://localhost:3000/uploads/test.txt',
                    hash: 'abc123',
                    metadata: {}
                },
                processed: []
            };
            _fileprocessor.fileProcessor.uploadFile.mockResolvedValue(mockUploadResult);
            const response = await (0, _route.POST)(mockRequest);
            const responseData = await response.json();
            expect(response.status).toBe(200);
            expect(responseData.success).toBe(true);
            expect(responseData.data.upload).toEqual(mockUploadResult);
            expect(_fileprocessor.fileProcessor.uploadFile).toHaveBeenCalledWith(mockFile, expect.objectContaining({
                userId: 'user_123'
            }));
        });
        it('should handle multiple file upload', async ()=>{
            const file1 = global.testUtils.createMockFile('test1.txt');
            const file2 = global.testUtils.createMockFile('test2.txt');
            const formData = new FormData();
            formData.append('files', file1);
            formData.append('files', file2);
            mockRequest.formData.mockResolvedValue(formData);
            const mockBatchResult = {
                batchId: 'batch_123',
                totalFiles: 2,
                successful: 2,
                failed: 0,
                results: [],
                errors: []
            };
            _fileprocessor.fileProcessor.uploadMultiple.mockResolvedValue(mockBatchResult);
            const response = await (0, _route.POST)(mockRequest);
            const responseData = await response.json();
            expect(response.status).toBe(200);
            expect(responseData.success).toBe(true);
            expect(responseData.data.batch).toEqual(mockBatchResult);
            expect(_fileprocessor.fileProcessor.uploadMultiple).toHaveBeenCalled();
        });
        it('should reject when no files provided', async ()=>{
            const formData = new FormData();
            mockRequest.formData.mockResolvedValue(formData);
            const response = await (0, _route.POST)(mockRequest);
            const responseData = await response.json();
            expect(response.status).toBe(400);
            expect(responseData.success).toBe(false);
            expect(responseData.error.code).toBe('NO_FILES');
        });
        it('should enforce file count limits', async ()=>{
            const formData = new FormData();
            formData.set('config', JSON.stringify({
                maxFiles: 2
            }));
            // Add 3 files (exceeds limit)
            for(let i = 0; i < 3; i++){
                formData.append('files', global.testUtils.createMockFile(`test${i}.txt`));
            }
            mockRequest.formData.mockResolvedValue(formData);
            const response = await (0, _route.POST)(mockRequest);
            const responseData = await response.json();
            expect(response.status).toBe(400);
            expect(responseData.error.code).toBe('TOO_MANY_FILES');
        });
        it('should handle upload errors', async ()=>{
            const mockFile = global.testUtils.createMockFile('test.txt');
            const formData = new FormData();
            formData.append('files', mockFile);
            mockRequest.formData.mockResolvedValue(formData);
            _fileprocessor.fileProcessor.uploadFile.mockRejectedValue(new Error('Upload failed'));
            const response = await (0, _route.POST)(mockRequest);
            const responseData = await response.json();
            expect(response.status).toBe(500);
            expect(responseData.success).toBe(false);
            expect(responseData.error.code).toBe('UPLOAD_ERROR');
        });
        it('should validate upload configuration', async ()=>{
            const formData = new FormData();
            formData.set('config', 'invalid json');
            formData.append('files', global.testUtils.createMockFile('test.txt'));
            mockRequest.formData.mockResolvedValue(formData);
            const response = await (0, _route.POST)(mockRequest);
            const responseData = await response.json();
            expect(response.status).toBe(500);
            expect(responseData.success).toBe(false);
        });
    });
    describe('GET /api/upload', ()=>{
        it('should get specific upload status', async ()=>{
            mockRequest.nextUrl.searchParams.set('uploadId', 'upload_123');
            const mockUploadStatus = {
                id: 'upload_123',
                status: 'completed',
                file: {
                    name: 'test.txt'
                },
                options: {
                    userId: 'user_123'
                },
                progress: 100
            };
            _fileprocessor.fileProcessor.getUploadStatus.mockReturnValue(mockUploadStatus);
            const response = await (0, _route.GET)(mockRequest);
            const responseData = await response.json();
            expect(response.status).toBe(200);
            expect(responseData.success).toBe(true);
            expect(responseData.data.upload).toEqual(mockUploadStatus);
        });
        it('should return 404 for non-existent upload', async ()=>{
            mockRequest.nextUrl.searchParams.set('uploadId', 'nonexistent');
            _fileprocessor.fileProcessor.getUploadStatus.mockReturnValue(null);
            const response = await (0, _route.GET)(mockRequest);
            const responseData = await response.json();
            expect(response.status).toBe(404);
            expect(responseData.error.code).toBe('UPLOAD_NOT_FOUND');
        });
        it('should deny access to other users uploads', async ()=>{
            mockRequest.nextUrl.searchParams.set('uploadId', 'upload_123');
            const mockUploadStatus = {
                id: 'upload_123',
                options: {
                    userId: 'other_user'
                } // Different user
            };
            _fileprocessor.fileProcessor.getUploadStatus.mockReturnValue(mockUploadStatus);
            const response = await (0, _route.GET)(mockRequest);
            const responseData = await response.json();
            expect(response.status).toBe(403);
            expect(responseData.error.code).toBe('ACCESS_DENIED');
        });
        it('should get user uploads list', async ()=>{
            mockRequest.nextUrl.searchParams.set('page', '1');
            mockRequest.nextUrl.searchParams.set('limit', '10');
            const mockUploads = {
                uploads: [
                    {
                        id: 'upload_1',
                        file: {
                            name: 'file1.txt'
                        }
                    },
                    {
                        id: 'upload_2',
                        file: {
                            name: 'file2.txt'
                        }
                    }
                ],
                pagination: {
                    page: 1,
                    limit: 10,
                    total: 2,
                    pages: 1
                }
            };
            _fileprocessor.fileProcessor.getUserUploads.mockReturnValue(mockUploads);
            const response = await (0, _route.GET)(mockRequest);
            const responseData = await response.json();
            expect(response.status).toBe(200);
            expect(responseData.success).toBe(true);
            expect(responseData.data.uploads).toEqual(mockUploads.uploads);
            expect(responseData.data.pagination).toEqual(mockUploads.pagination);
        });
    });
    describe('DELETE /api/upload', ()=>{
        it('should delete upload successfully', async ()=>{
            mockRequest.nextUrl.searchParams.set('uploadId', 'upload_123');
            const mockUploadStatus = {
                id: 'upload_123',
                options: {
                    userId: 'user_123'
                }
            };
            _fileprocessor.fileProcessor.getUploadStatus.mockReturnValue(mockUploadStatus);
            _fileprocessor.fileProcessor.deleteUpload.mockResolvedValue(true);
            const response = await (0, _route.DELETE)(mockRequest);
            const responseData = await response.json();
            expect(response.status).toBe(200);
            expect(responseData.success).toBe(true);
            expect(_fileprocessor.fileProcessor.deleteUpload).toHaveBeenCalledWith('upload_123');
        });
        it('should require uploadId parameter', async ()=>{
            const response = await (0, _route.DELETE)(mockRequest);
            const responseData = await response.json();
            expect(response.status).toBe(400);
            expect(responseData.error.code).toBe('MISSING_UPLOAD_ID');
        });
        it('should return 404 for non-existent upload', async ()=>{
            mockRequest.nextUrl.searchParams.set('uploadId', 'nonexistent');
            _fileprocessor.fileProcessor.getUploadStatus.mockReturnValue(null);
            const response = await (0, _route.DELETE)(mockRequest);
            const responseData = await response.json();
            expect(response.status).toBe(404);
            expect(responseData.error.code).toBe('UPLOAD_NOT_FOUND');
        });
        it('should deny access to other users uploads', async ()=>{
            mockRequest.nextUrl.searchParams.set('uploadId', 'upload_123');
            const mockUploadStatus = {
                id: 'upload_123',
                options: {
                    userId: 'other_user'
                }
            };
            _fileprocessor.fileProcessor.getUploadStatus.mockReturnValue(mockUploadStatus);
            const response = await (0, _route.DELETE)(mockRequest);
            const responseData = await response.json();
            expect(response.status).toBe(403);
            expect(responseData.error.code).toBe('ACCESS_DENIED');
        });
        it('should handle deletion failures', async ()=>{
            mockRequest.nextUrl.searchParams.set('uploadId', 'upload_123');
            const mockUploadStatus = {
                id: 'upload_123',
                options: {
                    userId: 'user_123'
                }
            };
            _fileprocessor.fileProcessor.getUploadStatus.mockReturnValue(mockUploadStatus);
            _fileprocessor.fileProcessor.deleteUpload.mockResolvedValue(false);
            const response = await (0, _route.DELETE)(mockRequest);
            const responseData = await response.json();
            expect(response.status).toBe(500);
            expect(responseData.error.code).toBe('DELETE_FAILED');
        });
    });
    describe('File Processing Configuration', ()=>{
        it('should configure image processing options', async ()=>{
            const mockFile = global.testUtils.createMockFile('image.jpg', 'image content', 'image/jpeg');
            const formData = new FormData();
            formData.append('files', mockFile);
            formData.set('config', JSON.stringify({
                processImages: true,
                generateThumbnails: true
            }));
            mockRequest.formData.mockResolvedValue(formData);
            const mockUploadResult = {
                success: true,
                uploadId: 'upload_123',
                file: {
                    path: '/test',
                    url: '/test',
                    hash: 'abc',
                    metadata: {}
                },
                processed: []
            };
            _fileprocessor.fileProcessor.uploadFile.mockResolvedValue(mockUploadResult);
            await (0, _route.POST)(mockRequest);
            expect(_fileprocessor.fileProcessor.uploadFile).toHaveBeenCalledWith(mockFile, expect.objectContaining({
                imageProcessing: expect.objectContaining({
                    generateThumbnails: true,
                    thumbnailSizes: expect.any(Array),
                    optimize: true
                })
            }));
        });
        it('should configure document processing options', async ()=>{
            const mockFile = global.testUtils.createMockFile('doc.pdf', 'pdf content', 'application/pdf');
            const formData = new FormData();
            formData.append('files', mockFile);
            formData.set('config', JSON.stringify({
                processDocuments: true,
                extractText: true
            }));
            mockRequest.formData.mockResolvedValue(formData);
            const mockUploadResult = {
                success: true,
                uploadId: 'upload_123',
                file: {
                    path: '/test',
                    url: '/test',
                    hash: 'abc',
                    metadata: {}
                },
                processed: []
            };
            _fileprocessor.fileProcessor.uploadFile.mockResolvedValue(mockUploadResult);
            await (0, _route.POST)(mockRequest);
            expect(_fileprocessor.fileProcessor.uploadFile).toHaveBeenCalledWith(mockFile, expect.objectContaining({
                documentProcessing: expect.objectContaining({
                    extractText: true,
                    generatePreview: true
                })
            }));
        });
    });
});

//# sourceMappingURL=data:application/json;base64,