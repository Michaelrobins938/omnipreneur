{"version":3,"sources":["C:\\Users\\Micha\\Favorites\\Downloads\\omnipreneur\\__tests__\\integration\\email-automation.test.ts"],"sourcesContent":["// @ts-nocheck\r\nimport { emailAutomationEngine } from '@/lib/email/automation-engine'\r\n\r\ndescribe('Email Automation Integration', () => {\r\n  beforeEach(() => {\r\n    // Clean state before each test\r\n    emailAutomationEngine.removeAllListeners()\r\n  })\r\n\r\n  afterEach(() => {\r\n    // Clean up after tests\r\n    emailAutomationEngine.destroy()\r\n  })\r\n\r\n  describe('Campaign Lifecycle', () => {\r\n    it('should create, schedule, and execute a campaign', async () => {\r\n      // Create campaign\r\n      const campaign = await emailAutomationEngine.createCampaign({\r\n        userId: 'user_123',\r\n        name: 'Test Campaign',\r\n        type: 'newsletter',\r\n        subject: 'Test Subject',\r\n        content: 'Test content',\r\n        recipientSegment: 'all',\r\n        scheduledAt: new Date(Date.now() + 1000) // 1 second from now\r\n      })\r\n\r\n      expect(campaign).toMatchObject({\r\n        id: expect.any(String),\r\n        name: 'Test Campaign',\r\n        status: 'draft',\r\n        userId: 'user_123'\r\n      })\r\n\r\n      // Wait for execution\r\n      await new Promise(resolve => setTimeout(resolve, 1500))\r\n\r\n      // Check if campaign was executed\r\n      const executedCampaign = await emailAutomationEngine.getCampaignAnalytics(campaign.id)\r\n      expect(executedCampaign).toBeDefined()\r\n    })\r\n\r\n    it('should handle campaign updates', async () => {\r\n      const campaign = await emailAutomationEngine.createCampaign({\r\n        userId: 'user_123',\r\n        name: 'Original Name',\r\n        type: 'promotional',\r\n        subject: 'Original Subject',\r\n        content: 'Original content',\r\n        recipientSegment: 'all'\r\n      })\r\n\r\n      const updatedCampaign = await emailAutomationEngine.updateCampaign(campaign.id, {\r\n        name: 'Updated Name',\r\n        subject: 'Updated Subject'\r\n      })\r\n\r\n      expect(updatedCampaign?.name).toBe('Updated Name')\r\n      expect(updatedCampaign?.subject).toBe('Updated Subject')\r\n      expect(updatedCampaign?.content).toBe('Original content') // Should remain unchanged\r\n    })\r\n\r\n    it('should delete campaigns', async () => {\r\n      const campaign = await emailAutomationEngine.createCampaign({\r\n        userId: 'user_123',\r\n        name: 'To Be Deleted',\r\n        type: 'welcome',\r\n        subject: 'Welcome!',\r\n        content: 'Welcome content',\r\n        recipientSegment: 'new_users'\r\n      })\r\n\r\n      const deleted = await emailAutomationEngine.deleteCampaign(campaign.id)\r\n      expect(deleted).toBe(true)\r\n\r\n      // Should throw error when trying to get analytics for deleted campaign\r\n      await expect(\r\n        emailAutomationEngine.getCampaignAnalytics(campaign.id)\r\n      ).rejects.toThrow()\r\n    })\r\n  })\r\n\r\n  describe('Automation Workflows', () => {\r\n    it('should create and trigger automation', async () => {\r\n      const automation = await emailAutomationEngine.createAutomation({\r\n        name: 'Welcome Series',\r\n        description: 'Send welcome emails to new users',\r\n        triggers: [\r\n          {\r\n            type: 'user_signup',\r\n            conditions: {},\r\n            delay: 0\r\n          }\r\n        ],\r\n        actions: [\r\n          {\r\n            type: 'send_email',\r\n            data: {\r\n              templateId: 'welcome_email',\r\n              subject: 'Welcome!',\r\n              content: 'Welcome to our platform!'\r\n            },\r\n            delay: 0\r\n          }\r\n        ]\r\n      })\r\n\r\n      expect(automation).toMatchObject({\r\n        id: expect.any(String),\r\n        name: 'Welcome Series',\r\n        status: 'active',\r\n        triggers: expect.arrayContaining([\r\n          expect.objectContaining({\r\n            type: 'user_signup'\r\n          })\r\n        ])\r\n      })\r\n\r\n      // Trigger the automation\r\n      const triggered = await emailAutomationEngine.triggerAutomation(\r\n        automation.id,\r\n        'new_user_123',\r\n        { signupDate: new Date().toISOString() }\r\n      )\r\n\r\n      expect(triggered).toBe(true)\r\n\r\n      // Check automation metrics\r\n      const analytics = await emailAutomationEngine.getAutomationAnalytics(automation.id)\r\n      expect(analytics.metrics.triggered).toBe(1)\r\n    })\r\n\r\n    it('should handle complex automation workflows', async () => {\r\n      const automation = await emailAutomationEngine.createAutomation({\r\n        name: 'Abandoned Cart Recovery',\r\n        triggers: [\r\n          {\r\n            type: 'custom_event',\r\n            conditions: { eventName: 'cart_abandoned' },\r\n            delay: 0\r\n          }\r\n        ],\r\n        actions: [\r\n          {\r\n            type: 'send_email',\r\n            data: {\r\n              subject: 'You left items in your cart',\r\n              content: 'Come back and complete your purchase!'\r\n            },\r\n            delay: 3600000 // 1 hour delay\r\n          },\r\n          {\r\n            type: 'send_email',\r\n            data: {\r\n              subject: 'Last chance - 10% off your cart',\r\n              content: 'Use code SAVE10 to complete your purchase'\r\n            },\r\n            delay: 86400000 // 24 hour delay\r\n          }\r\n        ]\r\n      })\r\n\r\n      // Trigger cart abandonment\r\n      const triggered = await emailAutomationEngine.triggerAutomation(\r\n        automation.id,\r\n        'user_456',\r\n        {\r\n          cartValue: 99.99,\r\n          items: ['product_1', 'product_2']\r\n        }\r\n      )\r\n\r\n      expect(triggered).toBe(true)\r\n\r\n      const analytics = await emailAutomationEngine.getAutomationAnalytics(automation.id)\r\n      expect(analytics.metrics.triggered).toBe(1)\r\n      expect(analytics.metrics.active).toBe(1) // Should be in progress\r\n    })\r\n  })\r\n\r\n  describe('Recurring Campaigns', () => {\r\n    it('should schedule recurring campaigns', async () => {\r\n      const recurringId = await emailAutomationEngine.scheduleRecurringCampaign(\r\n        {\r\n          userId: 'user_123',\r\n          name: 'Weekly Newsletter',\r\n          type: 'newsletter',\r\n          subject: 'Weekly Update {{date}}',\r\n          content: 'This weeks newsletter content',\r\n          recipientSegment: 'subscribers'\r\n        },\r\n        {\r\n          frequency: 'weekly',\r\n          time: '09:00'\r\n        }\r\n      )\r\n\r\n      expect(recurringId).toBeDefined()\r\n      expect(typeof recurringId).toBe('string')\r\n    })\r\n  })\r\n\r\n  describe('A/B Testing', () => {\r\n    it('should create and execute A/B tests', async () => {\r\n      const abTest = await emailAutomationEngine.createABTest(\r\n        {\r\n          userId: 'user_123',\r\n          name: 'Subject Line Test',\r\n          type: 'promotional',\r\n          subject: 'Default Subject',\r\n          content: 'Test content',\r\n          recipientSegment: 'all'\r\n        },\r\n        [\r\n          {\r\n            name: 'Variant A',\r\n            subject: 'Buy Now - Limited Time!',\r\n            content: 'Urgent purchase content',\r\n            allocation: 50\r\n          },\r\n          {\r\n            name: 'Variant B',\r\n            subject: 'Special Offer Just for You',\r\n            content: 'Personalized offer content',\r\n            allocation: 50\r\n          }\r\n        ]\r\n      )\r\n\r\n      expect(abTest).toMatchObject({\r\n        id: expect.any(String),\r\n        name: 'A/B Test: Subject Line Test',\r\n        variants: expect.arrayContaining([\r\n          expect.objectContaining({\r\n            name: 'Variant A',\r\n            allocation: 50\r\n          }),\r\n          expect.objectContaining({\r\n            name: 'Variant B',\r\n            allocation: 50\r\n          })\r\n        ])\r\n      })\r\n\r\n      // Execute the A/B test\r\n      await emailAutomationEngine.executeABTest(abTest.id)\r\n\r\n      // Should create campaigns for each variant\r\n      expect(abTest.variants[0].campaignId).toBeDefined()\r\n      expect(abTest.variants[1].campaignId).toBeDefined()\r\n    })\r\n  })\r\n\r\n  describe('Event-Driven Automation', () => {\r\n    it('should respond to user signup events', (done) => {\r\n      emailAutomationEngine.createAutomation({\r\n        name: 'Signup Automation',\r\n        triggers: [\r\n          {\r\n            type: 'user_signup',\r\n            conditions: {}\r\n          }\r\n        ],\r\n        actions: [\r\n          {\r\n            type: 'send_email',\r\n            data: {\r\n              subject: 'Welcome aboard!',\r\n              content: 'Thanks for signing up'\r\n            }\r\n          }\r\n        ]\r\n      }).then((automation) => {\r\n        // Listen for automation trigger\r\n        emailAutomationEngine.on('automation:triggered', (data) => {\r\n          expect(data.automation.id).toBe(automation.id)\r\n          expect(data.userId).toBe('new_user_789')\r\n          done()\r\n        })\r\n\r\n        // Emit signup event\r\n        emailAutomationEngine.emit('user:signup', {\r\n          userId: 'new_user_789',\r\n          email: 'newuser@example.com',\r\n          signupDate: new Date().toISOString()\r\n        })\r\n      })\r\n    })\r\n\r\n    it('should respond to purchase events', (done) => {\r\n      emailAutomationEngine.createAutomation({\r\n        name: 'Purchase Follow-up',\r\n        triggers: [\r\n          {\r\n            type: 'purchase',\r\n            conditions: { minimumAmount: 50 }\r\n          }\r\n        ],\r\n        actions: [\r\n          {\r\n            type: 'send_email',\r\n            data: {\r\n              subject: 'Thank you for your purchase!',\r\n              content: 'We appreciate your business'\r\n            }\r\n          }\r\n        ]\r\n      }).then((automation) => {\r\n        emailAutomationEngine.on('automation:triggered', (data) => {\r\n          expect(data.triggerData.amount).toBe(99.99)\r\n          done()\r\n        })\r\n\r\n        // Emit purchase event\r\n        emailAutomationEngine.emit('user:purchase', {\r\n          userId: 'customer_123',\r\n          amount: 99.99,\r\n          productId: 'premium_plan'\r\n        })\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('Content Personalization', () => {\r\n    it('should personalize email content', async () => {\r\n      const campaign = await emailAutomationEngine.createCampaign({\r\n        userId: 'user_123',\r\n        name: 'Personalized Campaign',\r\n        type: 'promotional',\r\n        subject: 'Hello {{name}}!',\r\n        content: 'Hi {{first_name}}, check out our new features at {{company}}!',\r\n        recipientSegment: 'all'\r\n      })\r\n\r\n      // Mock recipient data\r\n      const recipient = {\r\n        id: 'recipient_1',\r\n        email: 'john.doe@company.com',\r\n        name: 'John Doe',\r\n        firstName: 'John',\r\n        lastName: 'Doe',\r\n        company: 'Tech Corp'\r\n      }\r\n\r\n      // Get the personalization method (normally private)\r\n      const personalizeMethod = emailAutomationEngine['personalizeContent'].bind(emailAutomationEngine)\r\n      const personalized = await personalizeMethod(campaign, recipient)\r\n\r\n      expect(personalized.subject).toBe('Hello John Doe!')\r\n      expect(personalized.content).toContain('Hi John,')\r\n      expect(personalized.content).toContain('at Tech Corp!')\r\n    })\r\n  })\r\n\r\n  describe('Analytics and Reporting', () => {\r\n    it('should provide campaign analytics', async () => {\r\n      const campaign = await emailAutomationEngine.createCampaign({\r\n        userId: 'user_123',\r\n        name: 'Analytics Test',\r\n        type: 'newsletter',\r\n        subject: 'Test Newsletter',\r\n        content: 'Newsletter content',\r\n        recipientSegment: 'all'\r\n      })\r\n\r\n      // Execute campaign to generate metrics\r\n      await emailAutomationEngine.executeCampaign(campaign.id)\r\n\r\n      const analytics = await emailAutomationEngine.getCampaignAnalytics(campaign.id)\r\n\r\n      expect(analytics).toMatchObject({\r\n        campaignId: campaign.id,\r\n        metrics: expect.objectContaining({\r\n          sent: expect.any(Number),\r\n          delivered: expect.any(Number),\r\n          opened: expect.any(Number),\r\n          clicked: expect.any(Number)\r\n        }),\r\n        timeline: expect.any(Array),\r\n        engagement: expect.any(Object),\r\n        deliverability: expect.any(Object)\r\n      })\r\n    })\r\n\r\n    it('should provide automation analytics', async () => {\r\n      const automation = await emailAutomationEngine.createAutomation({\r\n        name: 'Analytics Automation',\r\n        triggers: [{ type: 'user_signup', conditions: {} }],\r\n        actions: [\r\n          {\r\n            type: 'send_email',\r\n            data: { subject: 'Welcome', content: 'Welcome!' }\r\n          }\r\n        ]\r\n      })\r\n\r\n      // Trigger automation multiple times\r\n      await emailAutomationEngine.triggerAutomation(automation.id, 'user_1')\r\n      await emailAutomationEngine.triggerAutomation(automation.id, 'user_2')\r\n\r\n      const analytics = await emailAutomationEngine.getAutomationAnalytics(automation.id)\r\n\r\n      expect(analytics).toMatchObject({\r\n        automationId: automation.id,\r\n        metrics: expect.objectContaining({\r\n          triggered: 2,\r\n          completed: expect.any(Number),\r\n          active: expect.any(Number)\r\n        }),\r\n        flowAnalysis: expect.any(Object),\r\n        conversionFunnel: expect.any(Object)\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('Error Handling', () => {\r\n    it('should handle invalid campaign data', async () => {\r\n      await expect(\r\n        emailAutomationEngine.createCampaign({\r\n          userId: '', // Invalid\r\n          name: '',   // Invalid\r\n          type: 'invalid' as any, // Invalid\r\n          subject: '',\r\n          content: '',\r\n          recipientSegment: ''\r\n        })\r\n      ).rejects.toThrow()\r\n    })\r\n\r\n    it('should handle automation execution errors gracefully', async () => {\r\n      const automation = await emailAutomationEngine.createAutomation({\r\n        name: 'Error Test',\r\n        triggers: [{ type: 'user_signup', conditions: {} }],\r\n        actions: [\r\n          {\r\n            type: 'send_email',\r\n            data: { subject: 'Test', content: 'Test' }\r\n          }\r\n        ]\r\n      })\r\n\r\n      // Trigger with invalid user data\r\n      const result = await emailAutomationEngine.triggerAutomation(\r\n        automation.id,\r\n        '', // Invalid user ID\r\n        {}\r\n      )\r\n\r\n      // Should handle gracefully\r\n      expect(typeof result).toBe('boolean')\r\n    })\r\n  })\r\n\r\n  describe('Performance', () => {\r\n    it('should handle multiple concurrent campaigns', async () => {\r\n      const campaigns = []\r\n      \r\n      // Create multiple campaigns concurrently\r\n      const createPromises = Array.from({ length: 10 }, (_, i) =>\r\n        emailAutomationEngine.createCampaign({\r\n          userId: 'user_123',\r\n          name: `Concurrent Campaign ${i}`,\r\n          type: 'newsletter',\r\n          subject: `Subject ${i}`,\r\n          content: `Content ${i}`,\r\n          recipientSegment: 'all'\r\n        })\r\n      )\r\n\r\n      const results = await Promise.all(createPromises)\r\n      expect(results).toHaveLength(10)\r\n      \r\n      results.forEach((campaign, i) => {\r\n        expect(campaign.name).toBe(`Concurrent Campaign ${i}`)\r\n      })\r\n    })\r\n\r\n    it('should handle high-volume automation triggers', async () => {\r\n      const automation = await emailAutomationEngine.createAutomation({\r\n        name: 'High Volume Test',\r\n        triggers: [{ type: 'user_signup', conditions: {} }],\r\n        actions: [\r\n          {\r\n            type: 'send_email',\r\n            data: { subject: 'Welcome', content: 'Welcome!' }\r\n          }\r\n        ]\r\n      })\r\n\r\n      // Trigger automation for many users\r\n      const triggerPromises = Array.from({ length: 100 }, (_, i) =>\r\n        emailAutomationEngine.triggerAutomation(automation.id, `user_${i}`)\r\n      )\r\n\r\n      const results = await Promise.all(triggerPromises)\r\n      \r\n      // All should succeed\r\n      expect(results.every(result => result === true)).toBe(true)\r\n\r\n      const analytics = await emailAutomationEngine.getAutomationAnalytics(automation.id)\r\n      expect(analytics.metrics.triggered).toBe(100)\r\n    })\r\n  })\r\n})"],"names":["describe","beforeEach","emailAutomationEngine","removeAllListeners","afterEach","destroy","it","campaign","createCampaign","userId","name","type","subject","content","recipientSegment","scheduledAt","Date","now","expect","toMatchObject","id","any","String","status","Promise","resolve","setTimeout","executedCampaign","getCampaignAnalytics","toBeDefined","updatedCampaign","updateCampaign","toBe","deleted","deleteCampaign","rejects","toThrow","automation","createAutomation","description","triggers","conditions","delay","actions","data","templateId","arrayContaining","objectContaining","triggered","triggerAutomation","signupDate","toISOString","analytics","getAutomationAnalytics","metrics","eventName","cartValue","items","active","recurringId","scheduleRecurringCampaign","frequency","time","abTest","createABTest","allocation","variants","executeABTest","campaignId","done","then","on","emit","email","minimumAmount","triggerData","amount","productId","recipient","firstName","lastName","company","personalizeMethod","bind","personalized","toContain","executeCampaign","sent","Number","delivered","opened","clicked","timeline","Array","engagement","Object","deliverability","automationId","completed","flowAnalysis","conversionFunnel","result","campaigns","createPromises","from","length","_","i","results","all","toHaveLength","forEach","triggerPromises","every"],"mappings":"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"}