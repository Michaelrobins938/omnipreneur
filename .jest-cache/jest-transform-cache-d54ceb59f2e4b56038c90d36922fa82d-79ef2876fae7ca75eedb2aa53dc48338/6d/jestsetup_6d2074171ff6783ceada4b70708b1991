110744279297f5b51eaea7d00574818d
// Jest setup file for test configuration
"use strict";
// Mock Next.js router
jest.mock('next/navigation', ()=>({
        useRouter: ()=>({
                push: jest.fn(),
                replace: jest.fn(),
                back: jest.fn(),
                forward: jest.fn(),
                refresh: jest.fn(),
                prefetch: jest.fn()
            }),
        useSearchParams: ()=>({
                get: jest.fn(),
                getAll: jest.fn(),
                has: jest.fn(),
                keys: jest.fn(),
                values: jest.fn(),
                entries: jest.fn(),
                forEach: jest.fn(),
                toString: jest.fn()
            }),
        usePathname: ()=>'/test-path'
    }));
// Mock Framer Motion
jest.mock('framer-motion', ()=>({
        motion: {
            div: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    ...props,
                    children: children
                }),
            span: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                    ...props,
                    children: children
                }),
            button: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    ...props,
                    children: children
                }),
            form: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("form", {
                    ...props,
                    children: children
                }),
            input: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                    ...props,
                    children: children
                })
        },
        AnimatePresence: ({ children })=>children,
        useAnimation: ()=>({
                start: jest.fn(),
                stop: jest.fn(),
                set: jest.fn()
            })
    }));
// Mock Lucide React icons
jest.mock('lucide-react', ()=>({
        ChevronDown: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "chevron-down"
            }),
        ChevronUp: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "chevron-up"
            }),
        User: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "user-icon"
            }),
        Mail: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "mail-icon"
            }),
        Lock: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "lock-icon"
            }),
        Eye: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "eye-icon"
            }),
        EyeOff: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "eye-off-icon"
            }),
        Check: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "check-icon"
            }),
        X: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "x-icon"
            }),
        Loader2: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "loader-icon"
            }),
        AlertCircle: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "alert-icon"
            }),
        Upload: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "upload-icon"
            }),
        Download: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "download-icon"
            }),
        Settings: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "settings-icon"
            }),
        LogOut: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "logout-icon"
            }),
        BarChart3: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "barchart-icon"
            }),
        Activity: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "activity-icon"
            }),
        TrendingUp: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "trending-up-icon"
            }),
        DollarSign: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "dollar-icon"
            }),
        Target: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "target-icon"
            }),
        Users: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "users-icon"
            }),
        Zap: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "zap-icon"
            }),
        Clock: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "clock-icon"
            }),
        CheckCircle: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "check-circle-icon"
            }),
        AlertTriangle: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "alert-triangle-icon"
            }),
        ArrowRight: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "arrow-right-icon"
            }),
        Play: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "play-icon"
            }),
        Crown: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "crown-icon"
            }),
        Sparkles: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "sparkles-icon"
            }),
        Calendar: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "calendar-icon"
            }),
        FileText: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "file-text-icon"
            }),
        Package: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "package-icon"
            }),
        Brain: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "brain-icon"
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
require("@testing-library/jest-dom");
require("jest-extended");
// Mock environment variables
process.env.NODE_ENV = 'test';
process.env.NEXT_PUBLIC_APP_URL = 'http://localhost:3000';
process.env.JWT_SECRET = 'test-jwt-secret';
process.env.DATABASE_URL = 'postgresql://test:test@localhost:5432/test_db';
// Global fetch mock
global.fetch = jest.fn();
// Mock WebSocket
global.WebSocket = jest.fn().mockImplementation(()=>({
        send: jest.fn(),
        close: jest.fn(),
        onopen: null,
        onmessage: null,
        onclose: null,
        onerror: null,
        readyState: 1,
        CONNECTING: 0,
        OPEN: 1,
        CLOSING: 2,
        CLOSED: 3
    }));
// Mock localStorage
const localStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
};
global.localStorage = localStorageMock;
// Mock sessionStorage
const sessionStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
};
global.sessionStorage = sessionStorageMock;
// Mock console methods to reduce noise in tests
global.console = {
    ...console,
    warn: jest.fn(),
    error: jest.fn(),
    log: jest.fn()
};
// Mock File API
global.File = class File1 {
    constructor(chunks, filename, options = {}){
        this.name = filename;
        this.size = chunks.reduce((size, chunk)=>size + chunk.length, 0);
        this.type = options.type || '';
        this.lastModified = options.lastModified || Date.now();
    }
    arrayBuffer() {
        return Promise.resolve(new ArrayBuffer(this.size));
    }
    text() {
        return Promise.resolve('');
    }
};
global.FileReader = class FileReader {
    constructor(){
        this.readyState = 0;
        this.result = null;
    }
    readAsDataURL() {
        setTimeout(()=>{
            this.result = 'data:text/plain;base64,dGVzdA==';
            this.onload?.();
        }, 0);
    }
    readAsText() {
        setTimeout(()=>{
            this.result = 'test content';
            this.onload?.();
        }, 0);
    }
};
// Mock FormData
global.FormData = class FormData1 {
    constructor(){
        this.data = new Map();
    }
    append(key, value) {
        if (this.data.has(key)) {
            const existing = this.data.get(key);
            if (Array.isArray(existing)) {
                existing.push(value);
            } else {
                this.data.set(key, [
                    existing,
                    value
                ]);
            }
        } else {
            this.data.set(key, value);
        }
    }
    get(key) {
        const value = this.data.get(key);
        return Array.isArray(value) ? value[0] : value;
    }
    getAll(key) {
        const value = this.data.get(key);
        return Array.isArray(value) ? value : value ? [
            value
        ] : [];
    }
    has(key) {
        return this.data.has(key);
    }
    delete(key) {
        this.data.delete(key);
    }
    entries() {
        return this.data.entries();
    }
    keys() {
        return this.data.keys();
    }
    values() {
        return this.data.values();
    }
};
// Mock URL.createObjectURL
global.URL.createObjectURL = jest.fn(()=>'mocked-object-url');
global.URL.revokeObjectURL = jest.fn();
// Setup test database if needed
beforeAll(async ()=>{
// Initialize test database connection
// This would be implemented based on your database choice
});
afterAll(async ()=>{
// Clean up test database connections
// This would be implemented based on your database choice
});
beforeEach(()=>{
    // Clear all mocks before each test
    jest.clearAllMocks();
    // Reset fetch mock
    fetch.mockClear();
    // Reset localStorage
    localStorageMock.getItem.mockClear();
    localStorageMock.setItem.mockClear();
    localStorageMock.removeItem.mockClear();
    localStorageMock.clear.mockClear();
});
afterEach(()=>{
    // Clean up after each test
    jest.restoreAllMocks();
});
// Global test utilities
global.testUtils = {
    // Mock API response
    mockApiResponse: (data, status = 200)=>({
            ok: status >= 200 && status < 300,
            status,
            json: ()=>Promise.resolve(data),
            text: ()=>Promise.resolve(JSON.stringify(data))
        }),
    // Create mock user
    createMockUser: (overrides = {})=>({
            id: 'user_123',
            email: 'test@example.com',
            name: 'Test User',
            role: 'user',
            subscription: {
                plan: 'FREE',
                status: 'active'
            },
            ...overrides
        }),
    // Create mock request
    createMockRequest: (overrides = {})=>({
            method: 'GET',
            url: 'http://localhost:3000/api/test',
            headers: new Headers(),
            nextUrl: {
                pathname: '/api/test'
            },
            json: ()=>Promise.resolve({}),
            formData: ()=>Promise.resolve(new FormData()),
            ...overrides
        }),
    // Wait for async operations
    waitFor: (ms = 100)=>new Promise((resolve)=>setTimeout(resolve, ms)),
    // Mock file
    createMockFile: (name = 'test.txt', content = 'test content', type = 'text/plain')=>{
        return new File([
            content
        ], name, {
            type
        });
    }
};
// Suppress specific warnings in tests
const originalError = console.error;
beforeAll(()=>{
    console.error = (...args)=>{
        if (typeof args[0] === 'string' && args[0].includes('Warning: ReactDOM.render is no longer supported')) {
            return;
        }
        originalError.call(console, ...args);
    };
});
afterAll(()=>{
    console.error = originalError;
});

//# sourceMappingURL=data:application/json;base64,