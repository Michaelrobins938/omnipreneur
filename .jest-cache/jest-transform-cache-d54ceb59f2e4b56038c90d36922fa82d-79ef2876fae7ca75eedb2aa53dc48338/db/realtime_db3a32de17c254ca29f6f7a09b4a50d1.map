{"version":3,"sources":["C:\\Users\\Micha\\Favorites\\Downloads\\omnipreneur\\lib\\analytics\\real-time.ts"],"sourcesContent":["// @ts-nocheck\r\nimport { EventEmitter } from 'events';\r\n\r\n// Real-time analytics engine with WebSocket support\r\nexport class RealTimeAnalytics extends EventEmitter {\r\n  private wsConnections: Map<string, WebSocket> = new Map();\r\n  private analyticsBuffer: Map<string, any[]> = new Map();\r\n  private flushInterval: NodeJS.Timer | null = null;\r\n\r\n  constructor() {\r\n    super();\r\n    this.startFlushTimer();\r\n  }\r\n\r\n  // Track real-time events\r\n  trackEvent(userId: string, event: string, data: any = {}) {\r\n    const timestamp = new Date().toISOString();\r\n    const eventData = {\r\n      userId,\r\n      event,\r\n      data,\r\n      timestamp,\r\n      sessionId: this.getSessionId(userId)\r\n    };\r\n\r\n    // Add to buffer\r\n    if (!this.analyticsBuffer.has(userId)) {\r\n      this.analyticsBuffer.set(userId, []);\r\n    }\r\n    this.analyticsBuffer.get(userId)!.push(eventData);\r\n\r\n    // Emit real-time update\r\n    this.emit('analytics:event', eventData);\r\n\r\n    // Send to connected clients\r\n    this.broadcastToUser(userId, {\r\n      type: 'analytics_update',\r\n      payload: eventData\r\n    });\r\n\r\n    return eventData;\r\n  }\r\n\r\n  // Track user behavior in real-time\r\n  trackUserAction(userId: string, action: string, metadata: any = {}) {\r\n    return this.trackEvent(userId, 'user_action', {\r\n      action,\r\n      metadata,\r\n      userAgent: metadata.userAgent,\r\n      page: metadata.page,\r\n      referrer: metadata.referrer\r\n    });\r\n  }\r\n\r\n  // Track product usage\r\n  trackProductUsage(userId: string, productId: string, feature: string, usage: any = {}) {\r\n    return this.trackEvent(userId, 'product_usage', {\r\n      productId,\r\n      feature,\r\n      usage,\r\n      duration: usage.duration,\r\n      success: usage.success\r\n    });\r\n  }\r\n\r\n  // Track conversion funnel steps\r\n  trackFunnelStep(userId: string, funnelId: string, step: string, data: any = {}) {\r\n    return this.trackEvent(userId, 'funnel_step', {\r\n      funnelId,\r\n      step,\r\n      data,\r\n      previousStep: data.previousStep,\r\n      timeToStep: data.timeToStep\r\n    });\r\n  }\r\n\r\n  // Track revenue events\r\n  trackRevenue(userId: string, amount: number, currency: string = 'USD', metadata: any = {}) {\r\n    return this.trackEvent(userId, 'revenue', {\r\n      amount,\r\n      currency,\r\n      metadata,\r\n      subscriptionId: metadata.subscriptionId,\r\n      productId: metadata.productId,\r\n      upgradeFrom: metadata.upgradeFrom\r\n    });\r\n  }\r\n\r\n  // Get real-time analytics for a user\r\n  async getRealTimeAnalytics(userId: string, timeRange: string = '1h'): Promise<any> {\r\n    const buffer = this.analyticsBuffer.get(userId) || [];\r\n    const cutoffTime = this.getTimeRangeCutoff(timeRange);\r\n    \r\n    const recentEvents = buffer.filter(event => \r\n      new Date(event.timestamp) > cutoffTime\r\n    );\r\n\r\n    return {\r\n      totalEvents: recentEvents.length,\r\n      events: recentEvents,\r\n      metrics: this.calculateMetrics(recentEvents),\r\n      trends: this.calculateTrends(recentEvents),\r\n      lastUpdated: new Date().toISOString()\r\n    };\r\n  }\r\n\r\n  // Get live dashboard metrics\r\n  async getLiveDashboardMetrics(userId: string): Promise<any> {\r\n    const analytics = await this.getRealTimeAnalytics(userId, '24h');\r\n    \r\n    return {\r\n      activeUsers: this.getActiveUsersCount(),\r\n      revenueToday: this.getTodaysRevenue(userId),\r\n      conversionRate: this.calculateConversionRate(userId),\r\n      topProducts: this.getTopProducts(userId),\r\n      recentActivity: analytics.events.slice(-10),\r\n      performanceMetrics: {\r\n        avgResponseTime: this.getAverageResponseTime(),\r\n        successRate: this.getSuccessRate(userId),\r\n        errorRate: this.getErrorRate(userId)\r\n      },\r\n      realTimeStats: {\r\n        sessionsActive: this.getActiveSessions(),\r\n        eventsPerMinute: this.getEventsPerMinute(),\r\n        currentLoad: this.getCurrentSystemLoad()\r\n      }\r\n    };\r\n  }\r\n\r\n  // WebSocket connection management\r\n  addWSConnection(userId: string, ws: WebSocket) {\r\n    this.wsConnections.set(userId, ws);\r\n    \r\n    ws.on('close', () => {\r\n      this.wsConnections.delete(userId);\r\n    });\r\n\r\n    ws.on('error', (error) => {\r\n      console.error('WebSocket error for user', userId, error);\r\n      this.wsConnections.delete(userId);\r\n    });\r\n\r\n    // Send initial analytics data\r\n    this.sendInitialData(userId, ws);\r\n  }\r\n\r\n  // Broadcast to specific user\r\n  private broadcastToUser(userId: string, message: any) {\r\n    const ws = this.wsConnections.get(userId);\r\n    if (ws && ws.readyState === WebSocket.OPEN) {\r\n      ws.send(JSON.stringify(message));\r\n    }\r\n  }\r\n\r\n  // Broadcast to all connected clients\r\n  broadcastToAll(message: any) {\r\n    this.wsConnections.forEach((ws, userId) => {\r\n      if (ws.readyState === WebSocket.OPEN) {\r\n        ws.send(JSON.stringify(message));\r\n      }\r\n    });\r\n  }\r\n\r\n  // Send initial analytics data to new connection\r\n  private async sendInitialData(userId: string, ws: WebSocket) {\r\n    try {\r\n      const initialData = await this.getLiveDashboardMetrics(userId);\r\n      ws.send(JSON.stringify({\r\n        type: 'initial_analytics',\r\n        payload: initialData\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error sending initial data:', error);\r\n    }\r\n  }\r\n\r\n  // Calculate metrics from events\r\n  private calculateMetrics(events: any[]): any {\r\n    const metricsByType = events.reduce((acc, event) => {\r\n      if (!acc[event.event]) acc[event.event] = [];\r\n      acc[event.event].push(event);\r\n      return acc;\r\n    }, {});\r\n\r\n    return {\r\n      userActions: metricsByType.user_action?.length || 0,\r\n      productUsage: metricsByType.product_usage?.length || 0,\r\n      funnelSteps: metricsByType.funnel_step?.length || 0,\r\n      revenue: metricsByType.revenue?.reduce((sum, event) => sum + event.data.amount, 0) || 0,\r\n      uniqueProducts: new Set(metricsByType.product_usage?.map(e => e.data.productId) || []).size,\r\n      sessionDuration: this.calculateSessionDuration(events)\r\n    };\r\n  }\r\n\r\n  // Calculate trends\r\n  private calculateTrends(events: any[]): any {\r\n    const hourlyTrends = this.groupEventsByHour(events);\r\n    \r\n    return {\r\n      hourly: hourlyTrends,\r\n      growth: this.calculateGrowthRate(hourlyTrends),\r\n      predictions: this.generatePredictions(hourlyTrends)\r\n    };\r\n  }\r\n\r\n  // Group events by hour for trending\r\n  private groupEventsByHour(events: any[]): any {\r\n    return events.reduce((acc, event) => {\r\n      const hour = new Date(event.timestamp).getHours();\r\n      if (!acc[hour]) acc[hour] = 0;\r\n      acc[hour]++;\r\n      return acc;\r\n    }, {});\r\n  }\r\n\r\n  // Calculate growth rate\r\n  private calculateGrowthRate(hourlyData: any): number {\r\n    const hours = Object.keys(hourlyData).map(Number).sort();\r\n    if (hours.length < 2) return 0;\r\n    \r\n    const latest = hourlyData[hours[hours.length - 1]];\r\n    const previous = hourlyData[hours[hours.length - 2]];\r\n    \r\n    return previous > 0 ? ((latest - previous) / previous) * 100 : 0;\r\n  }\r\n\r\n  // Generate simple predictions\r\n  private generatePredictions(hourlyData: any): any {\r\n    const hours = Object.keys(hourlyData).map(Number).sort();\r\n    const values = hours.map(hour => hourlyData[hour]);\r\n    \r\n    if (values.length < 3) return { nextHour: 0, confidence: 0 };\r\n    \r\n    // Simple linear regression prediction\r\n    const avgGrowth = values.slice(-3).reduce((sum, val, idx, arr) => {\r\n      if (idx === 0) return 0;\r\n      return sum + (val - arr[idx - 1]);\r\n    }, 0) / 2;\r\n    \r\n    return {\r\n      nextHour: Math.max(0, values[values.length - 1] + avgGrowth),\r\n      confidence: Math.min(95, values.length * 10)\r\n    };\r\n  }\r\n\r\n  // Helper methods\r\n  private getSessionId(userId: string): string {\r\n    return `session_${userId}_${Date.now()}`;\r\n  }\r\n\r\n  private getTimeRangeCutoff(timeRange: string): Date {\r\n    const now = new Date();\r\n    const ranges = {\r\n      '1h': 60 * 60 * 1000,\r\n      '6h': 6 * 60 * 60 * 1000,\r\n      '24h': 24 * 60 * 60 * 1000,\r\n      '7d': 7 * 24 * 60 * 60 * 1000\r\n    };\r\n    \r\n    const milliseconds = ranges[timeRange as keyof typeof ranges] || ranges['1h'];\r\n    return new Date(now.getTime() - milliseconds);\r\n  }\r\n\r\n  private calculateSessionDuration(events: any[]): number {\r\n    if (events.length < 2) return 0;\r\n    \r\n    const sorted = events.sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\r\n    const start = new Date(sorted[0].timestamp);\r\n    const end = new Date(sorted[sorted.length - 1].timestamp);\r\n    \r\n    return end.getTime() - start.getTime();\r\n  }\r\n\r\n  // Mock implementations for system metrics\r\n  private getActiveUsersCount(): number {\r\n    return this.wsConnections.size;\r\n  }\r\n\r\n  private getTodaysRevenue(userId: string): number {\r\n    const buffer = this.analyticsBuffer.get(userId) || [];\r\n    const today = new Date().toDateString();\r\n    \r\n    return buffer\r\n      .filter(event => event.event === 'revenue' && new Date(event.timestamp).toDateString() === today)\r\n      .reduce((sum, event) => sum + event.data.amount, 0);\r\n  }\r\n\r\n  private calculateConversionRate(userId: string): number {\r\n    const buffer = this.analyticsBuffer.get(userId) || [];\r\n    const funnelSteps = buffer.filter(event => event.event === 'funnel_step');\r\n    const conversions = buffer.filter(event => event.event === 'revenue');\r\n    \r\n    return funnelSteps.length > 0 ? (conversions.length / funnelSteps.length) * 100 : 0;\r\n  }\r\n\r\n  private getTopProducts(userId: string): any[] {\r\n    const buffer = this.analyticsBuffer.get(userId) || [];\r\n    const productUsage = buffer.filter(event => event.event === 'product_usage');\r\n    \r\n    const productCounts = productUsage.reduce((acc, event) => {\r\n      const productId = event.data.productId;\r\n      acc[productId] = (acc[productId] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n    \r\n    return Object.entries(productCounts)\r\n      .sort(([,a], [,b]) => (b as number) - (a as number))\r\n      .slice(0, 5)\r\n      .map(([productId, count]) => ({ productId, usage: count }));\r\n  }\r\n\r\n  private getAverageResponseTime(): number {\r\n    return Math.random() * 100 + 50; // Mock implementation\r\n  }\r\n\r\n  private getSuccessRate(userId: string): number {\r\n    const buffer = this.analyticsBuffer.get(userId) || [];\r\n    const productUsage = buffer.filter(event => event.event === 'product_usage');\r\n    \r\n    if (productUsage.length === 0) return 100;\r\n    \r\n    const successfulUsage = productUsage.filter(event => event.data.usage?.success !== false);\r\n    return (successfulUsage.length / productUsage.length) * 100;\r\n  }\r\n\r\n  private getErrorRate(userId: string): number {\r\n    return 100 - this.getSuccessRate(userId);\r\n  }\r\n\r\n  private getActiveSessions(): number {\r\n    return Math.floor(Math.random() * 50) + 10; // Mock implementation\r\n  }\r\n\r\n  private getEventsPerMinute(): number {\r\n    const allEvents = Array.from(this.analyticsBuffer.values()).flat();\r\n    const lastMinute = new Date(Date.now() - 60000);\r\n    \r\n    return allEvents.filter(event => new Date(event.timestamp) > lastMinute).length;\r\n  }\r\n\r\n  private getCurrentSystemLoad(): number {\r\n    return Math.random() * 100; // Mock implementation\r\n  }\r\n\r\n  // Flush analytics buffer periodically\r\n  private startFlushTimer() {\r\n    this.flushInterval = setInterval(() => {\r\n      this.flushAnalyticsBuffer();\r\n    }, 60000); // Flush every minute\r\n  }\r\n\r\n  private flushAnalyticsBuffer() {\r\n    // In production, flush to database or external analytics service\r\n    for (const [userId, events] of this.analyticsBuffer.entries()) {\r\n      if (events.length > 100) {\r\n        // Keep only recent events in memory\r\n        this.analyticsBuffer.set(userId, events.slice(-50));\r\n      }\r\n    }\r\n  }\r\n\r\n  // Cleanup\r\n  destroy() {\r\n    if (this.flushInterval) {\r\n      clearInterval(this.flushInterval);\r\n    }\r\n    this.wsConnections.clear();\r\n    this.analyticsBuffer.clear();\r\n  }\r\n}\r\n\r\n// Singleton instance\r\nexport const realTimeAnalytics = new RealTimeAnalytics();"],"names":["RealTimeAnalytics","realTimeAnalytics","EventEmitter","wsConnections","Map","analyticsBuffer","flushInterval","startFlushTimer","trackEvent","userId","event","data","timestamp","Date","toISOString","eventData","sessionId","getSessionId","has","set","get","push","emit","broadcastToUser","type","payload","trackUserAction","action","metadata","userAgent","page","referrer","trackProductUsage","productId","feature","usage","duration","success","trackFunnelStep","funnelId","step","previousStep","timeToStep","trackRevenue","amount","currency","subscriptionId","upgradeFrom","getRealTimeAnalytics","timeRange","buffer","cutoffTime","getTimeRangeCutoff","recentEvents","filter","totalEvents","length","events","metrics","calculateMetrics","trends","calculateTrends","lastUpdated","getLiveDashboardMetrics","analytics","activeUsers","getActiveUsersCount","revenueToday","getTodaysRevenue","conversionRate","calculateConversionRate","topProducts","getTopProducts","recentActivity","slice","performanceMetrics","avgResponseTime","getAverageResponseTime","successRate","getSuccessRate","errorRate","getErrorRate","realTimeStats","sessionsActive","getActiveSessions","eventsPerMinute","getEventsPerMinute","currentLoad","getCurrentSystemLoad","addWSConnection","ws","on","delete","error","console","sendInitialData","message","readyState","WebSocket","OPEN","send","JSON","stringify","broadcastToAll","forEach","initialData","metricsByType","reduce","acc","userActions","user_action","productUsage","product_usage","funnelSteps","funnel_step","revenue","sum","uniqueProducts","Set","map","e","size","sessionDuration","calculateSessionDuration","hourlyTrends","groupEventsByHour","hourly","growth","calculateGrowthRate","predictions","generatePredictions","hour","getHours","hourlyData","hours","Object","keys","Number","sort","latest","previous","values","nextHour","confidence","avgGrowth","val","idx","arr","Math","max","min","now","ranges","milliseconds","getTime","sorted","a","b","start","end","today","toDateString","conversions","productCounts","entries","count","random","successfulUsage","floor","allEvents","Array","from","flat","lastMinute","setInterval","flushAnalyticsBuffer","destroy","clearInterval","clear"],"mappings":"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"}