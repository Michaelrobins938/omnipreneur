5c5d5eb7dea0e61960e9b2278ef1f167
// @ts-nocheck
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get RealTimeAnalytics () {
        return RealTimeAnalytics;
    },
    get realTimeAnalytics () {
        return realTimeAnalytics;
    }
});
const _events = require("events");
class RealTimeAnalytics extends _events.EventEmitter {
    constructor(){
        super(), this.wsConnections = new Map(), this.analyticsBuffer = new Map(), this.flushInterval = null;
        this.startFlushTimer();
    }
    // Track real-time events
    trackEvent(userId, event, data = {}) {
        const timestamp = new Date().toISOString();
        const eventData = {
            userId,
            event,
            data,
            timestamp,
            sessionId: this.getSessionId(userId)
        };
        // Add to buffer
        if (!this.analyticsBuffer.has(userId)) {
            this.analyticsBuffer.set(userId, []);
        }
        this.analyticsBuffer.get(userId).push(eventData);
        // Emit real-time update
        this.emit('analytics:event', eventData);
        // Send to connected clients
        this.broadcastToUser(userId, {
            type: 'analytics_update',
            payload: eventData
        });
        return eventData;
    }
    // Track user behavior in real-time
    trackUserAction(userId, action, metadata = {}) {
        return this.trackEvent(userId, 'user_action', {
            action,
            metadata,
            userAgent: metadata.userAgent,
            page: metadata.page,
            referrer: metadata.referrer
        });
    }
    // Track product usage
    trackProductUsage(userId, productId, feature, usage = {}) {
        return this.trackEvent(userId, 'product_usage', {
            productId,
            feature,
            usage,
            duration: usage.duration,
            success: usage.success
        });
    }
    // Track conversion funnel steps
    trackFunnelStep(userId, funnelId, step, data = {}) {
        return this.trackEvent(userId, 'funnel_step', {
            funnelId,
            step,
            data,
            previousStep: data.previousStep,
            timeToStep: data.timeToStep
        });
    }
    // Track revenue events
    trackRevenue(userId, amount, currency = 'USD', metadata = {}) {
        return this.trackEvent(userId, 'revenue', {
            amount,
            currency,
            metadata,
            subscriptionId: metadata.subscriptionId,
            productId: metadata.productId,
            upgradeFrom: metadata.upgradeFrom
        });
    }
    // Get real-time analytics for a user
    async getRealTimeAnalytics(userId, timeRange = '1h') {
        const buffer = this.analyticsBuffer.get(userId) || [];
        const cutoffTime = this.getTimeRangeCutoff(timeRange);
        const recentEvents = buffer.filter((event)=>new Date(event.timestamp) > cutoffTime);
        return {
            totalEvents: recentEvents.length,
            events: recentEvents,
            metrics: this.calculateMetrics(recentEvents),
            trends: this.calculateTrends(recentEvents),
            lastUpdated: new Date().toISOString()
        };
    }
    // Get live dashboard metrics
    async getLiveDashboardMetrics(userId) {
        const analytics = await this.getRealTimeAnalytics(userId, '24h');
        return {
            activeUsers: this.getActiveUsersCount(),
            revenueToday: this.getTodaysRevenue(userId),
            conversionRate: this.calculateConversionRate(userId),
            topProducts: this.getTopProducts(userId),
            recentActivity: analytics.events.slice(-10),
            performanceMetrics: {
                avgResponseTime: this.getAverageResponseTime(),
                successRate: this.getSuccessRate(userId),
                errorRate: this.getErrorRate(userId)
            },
            realTimeStats: {
                sessionsActive: this.getActiveSessions(),
                eventsPerMinute: this.getEventsPerMinute(),
                currentLoad: this.getCurrentSystemLoad()
            }
        };
    }
    // WebSocket connection management
    addWSConnection(userId, ws) {
        this.wsConnections.set(userId, ws);
        ws.on('close', ()=>{
            this.wsConnections.delete(userId);
        });
        ws.on('error', (error)=>{
            console.error('WebSocket error for user', userId, error);
            this.wsConnections.delete(userId);
        });
        // Send initial analytics data
        this.sendInitialData(userId, ws);
    }
    // Broadcast to specific user
    broadcastToUser(userId, message) {
        const ws = this.wsConnections.get(userId);
        if (ws && ws.readyState === WebSocket.OPEN) {
            ws.send(JSON.stringify(message));
        }
    }
    // Broadcast to all connected clients
    broadcastToAll(message) {
        this.wsConnections.forEach((ws, userId)=>{
            if (ws.readyState === WebSocket.OPEN) {
                ws.send(JSON.stringify(message));
            }
        });
    }
    // Send initial analytics data to new connection
    async sendInitialData(userId, ws) {
        try {
            const initialData = await this.getLiveDashboardMetrics(userId);
            ws.send(JSON.stringify({
                type: 'initial_analytics',
                payload: initialData
            }));
        } catch (error) {
            console.error('Error sending initial data:', error);
        }
    }
    // Calculate metrics from events
    calculateMetrics(events) {
        const metricsByType = events.reduce((acc, event)=>{
            if (!acc[event.event]) acc[event.event] = [];
            acc[event.event].push(event);
            return acc;
        }, {});
        return {
            userActions: metricsByType.user_action?.length || 0,
            productUsage: metricsByType.product_usage?.length || 0,
            funnelSteps: metricsByType.funnel_step?.length || 0,
            revenue: metricsByType.revenue?.reduce((sum, event)=>sum + event.data.amount, 0) || 0,
            uniqueProducts: new Set(metricsByType.product_usage?.map((e)=>e.data.productId) || []).size,
            sessionDuration: this.calculateSessionDuration(events)
        };
    }
    // Calculate trends
    calculateTrends(events) {
        const hourlyTrends = this.groupEventsByHour(events);
        return {
            hourly: hourlyTrends,
            growth: this.calculateGrowthRate(hourlyTrends),
            predictions: this.generatePredictions(hourlyTrends)
        };
    }
    // Group events by hour for trending
    groupEventsByHour(events) {
        return events.reduce((acc, event)=>{
            const hour = new Date(event.timestamp).getHours();
            if (!acc[hour]) acc[hour] = 0;
            acc[hour]++;
            return acc;
        }, {});
    }
    // Calculate growth rate
    calculateGrowthRate(hourlyData) {
        const hours = Object.keys(hourlyData).map(Number).sort();
        if (hours.length < 2) return 0;
        const latest = hourlyData[hours[hours.length - 1]];
        const previous = hourlyData[hours[hours.length - 2]];
        return previous > 0 ? (latest - previous) / previous * 100 : 0;
    }
    // Generate simple predictions
    generatePredictions(hourlyData) {
        const hours = Object.keys(hourlyData).map(Number).sort();
        const values = hours.map((hour)=>hourlyData[hour]);
        if (values.length < 3) return {
            nextHour: 0,
            confidence: 0
        };
        // Simple linear regression prediction
        const avgGrowth = values.slice(-3).reduce((sum, val, idx, arr)=>{
            if (idx === 0) return 0;
            return sum + (val - arr[idx - 1]);
        }, 0) / 2;
        return {
            nextHour: Math.max(0, values[values.length - 1] + avgGrowth),
            confidence: Math.min(95, values.length * 10)
        };
    }
    // Helper methods
    getSessionId(userId) {
        return `session_${userId}_${Date.now()}`;
    }
    getTimeRangeCutoff(timeRange) {
        const now = new Date();
        const ranges = {
            '1h': 60 * 60 * 1000,
            '6h': 6 * 60 * 60 * 1000,
            '24h': 24 * 60 * 60 * 1000,
            '7d': 7 * 24 * 60 * 60 * 1000
        };
        const milliseconds = ranges[timeRange] || ranges['1h'];
        return new Date(now.getTime() - milliseconds);
    }
    calculateSessionDuration(events) {
        if (events.length < 2) return 0;
        const sorted = events.sort((a, b)=>new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());
        const start = new Date(sorted[0].timestamp);
        const end = new Date(sorted[sorted.length - 1].timestamp);
        return end.getTime() - start.getTime();
    }
    // Mock implementations for system metrics
    getActiveUsersCount() {
        return this.wsConnections.size;
    }
    getTodaysRevenue(userId) {
        const buffer = this.analyticsBuffer.get(userId) || [];
        const today = new Date().toDateString();
        return buffer.filter((event)=>event.event === 'revenue' && new Date(event.timestamp).toDateString() === today).reduce((sum, event)=>sum + event.data.amount, 0);
    }
    calculateConversionRate(userId) {
        const buffer = this.analyticsBuffer.get(userId) || [];
        const funnelSteps = buffer.filter((event)=>event.event === 'funnel_step');
        const conversions = buffer.filter((event)=>event.event === 'revenue');
        return funnelSteps.length > 0 ? conversions.length / funnelSteps.length * 100 : 0;
    }
    getTopProducts(userId) {
        const buffer = this.analyticsBuffer.get(userId) || [];
        const productUsage = buffer.filter((event)=>event.event === 'product_usage');
        const productCounts = productUsage.reduce((acc, event)=>{
            const productId = event.data.productId;
            acc[productId] = (acc[productId] || 0) + 1;
            return acc;
        }, {});
        return Object.entries(productCounts).sort(([, a], [, b])=>b - a).slice(0, 5).map(([productId, count])=>({
                productId,
                usage: count
            }));
    }
    getAverageResponseTime() {
        return Math.random() * 100 + 50; // Mock implementation
    }
    getSuccessRate(userId) {
        const buffer = this.analyticsBuffer.get(userId) || [];
        const productUsage = buffer.filter((event)=>event.event === 'product_usage');
        if (productUsage.length === 0) return 100;
        const successfulUsage = productUsage.filter((event)=>event.data.usage?.success !== false);
        return successfulUsage.length / productUsage.length * 100;
    }
    getErrorRate(userId) {
        return 100 - this.getSuccessRate(userId);
    }
    getActiveSessions() {
        return Math.floor(Math.random() * 50) + 10; // Mock implementation
    }
    getEventsPerMinute() {
        const allEvents = Array.from(this.analyticsBuffer.values()).flat();
        const lastMinute = new Date(Date.now() - 60000);
        return allEvents.filter((event)=>new Date(event.timestamp) > lastMinute).length;
    }
    getCurrentSystemLoad() {
        return Math.random() * 100; // Mock implementation
    }
    // Flush analytics buffer periodically
    startFlushTimer() {
        this.flushInterval = setInterval(()=>{
            this.flushAnalyticsBuffer();
        }, 60000); // Flush every minute
    }
    flushAnalyticsBuffer() {
        // In production, flush to database or external analytics service
        for (const [userId, events] of this.analyticsBuffer.entries()){
            if (events.length > 100) {
                // Keep only recent events in memory
                this.analyticsBuffer.set(userId, events.slice(-50));
            }
        }
    }
    // Cleanup
    destroy() {
        if (this.flushInterval) {
            clearInterval(this.flushInterval);
        }
        this.wsConnections.clear();
        this.analyticsBuffer.clear();
    }
}
const realTimeAnalytics = new RealTimeAnalytics();

//# sourceMappingURL=data:application/json;base64,