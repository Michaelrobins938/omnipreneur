947f0529158e4f6ffb1d14a7a05be3de
// @ts-nocheck
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get AdvancedRateLimiter () {
        return AdvancedRateLimiter;
    },
    get advancedRateLimiter () {
        return advancedRateLimiter;
    }
});
const _events = require("events");
class AdvancedRateLimiter extends _events.EventEmitter {
    constructor(){
        super(), this.stores = new Map(), this.rules = new Map(), this.globalLimits = new Map(), this.whitelistedIPs = new Set(), this.blacklistedIPs = new Set(), this.suspiciousActivity = new Map();
        this.initializeDefaultRules();
        this.startCleanupTimer();
    }
    // Main rate limiting function
    async checkLimit(request) {
        const identifier = this.getIdentifier(request);
        // Check blacklist first
        if (this.blacklistedIPs.has(request.ip)) {
            return {
                allowed: false,
                reason: 'IP_BLACKLISTED',
                resetTime: Date.now() + 3600000,
                retryAfter: 3600
            };
        }
        // Check whitelist - bypass rate limits
        if (this.whitelistedIPs.has(request.ip)) {
            return {
                allowed: true,
                reason: 'WHITELISTED',
                remaining: Infinity,
                resetTime: Date.now() + 3600000
            };
        }
        // Get applicable rules
        const rules = this.getRulesForRequest(request);
        // Check each rule
        for (const rule of rules){
            const result = await this.checkRule(rule, identifier, request);
            if (!result.allowed) {
                // Track failed attempts for suspicious activity detection
                this.trackSuspiciousActivity(request.ip, rule);
                // Emit rate limit event
                this.emit('rateLimit:exceeded', {
                    rule: rule.name,
                    identifier,
                    request,
                    result
                });
                return result;
            }
        }
        // Check global limits
        const globalResult = await this.checkGlobalLimits(request);
        if (!globalResult.allowed) {
            return globalResult;
        }
        // All checks passed - record the request
        await this.recordRequest(identifier, request);
        // Get remaining count for the most restrictive rule
        const remaining = await this.getRemainingCount(rules, identifier);
        return {
            allowed: true,
            remaining,
            resetTime: Date.now() + Math.min(...rules.map((r)=>r.window))
        };
    }
    // Add custom rate limit rule
    addRule(rule) {
        const endpoint = rule.endpoint || '*';
        if (!this.rules.has(endpoint)) {
            this.rules.set(endpoint, []);
        }
        this.rules.get(endpoint).push(rule);
        // Sort rules by priority (higher first)
        this.rules.get(endpoint).sort((a, b)=>(b.priority || 0) - (a.priority || 0));
    }
    // Dynamic rate limiting based on system load
    async adjustLimitsBasedOnLoad() {
        const systemLoad = await this.getSystemLoad();
        const dbLoad = await this.getDatabaseLoad();
        // Reduce limits if system is under high load
        if (systemLoad > 80 || dbLoad > 80) {
            this.applyLoadBasedLimits(0.5); // Reduce by 50%
            this.emit('rateLimit:loadAdjustment', {
                systemLoad,
                dbLoad,
                factor: 0.5
            });
        } else if (systemLoad > 60 || dbLoad > 60) {
            this.applyLoadBasedLimits(0.75); // Reduce by 25%
            this.emit('rateLimit:loadAdjustment', {
                systemLoad,
                dbLoad,
                factor: 0.75
            });
        } else {
            this.applyLoadBasedLimits(1.0); // Normal limits
        }
    }
    // Sliding window rate limiting
    async slidingWindowCheck(rule, identifier) {
        const store = this.getStore(rule.name);
        const now = Date.now();
        const windowStart = now - rule.window;
        // Get requests in the current window
        const requests = store.getRequestsInWindow(identifier, windowStart, now);
        if (requests.length >= rule.limit) {
            const oldestRequest = Math.min(...requests);
            const resetTime = oldestRequest + rule.window;
            return {
                allowed: false,
                reason: 'RATE_LIMIT_EXCEEDED',
                resetTime,
                retryAfter: Math.ceil((resetTime - now) / 1000),
                limit: rule.limit,
                remaining: 0
            };
        }
        return {
            allowed: true,
            remaining: rule.limit - requests.length - 1,
            resetTime: now + rule.window
        };
    }
    // Token bucket rate limiting
    async tokenBucketCheck(rule, identifier) {
        const store = this.getStore(rule.name);
        const bucket = store.getTokenBucket(identifier) || {
            tokens: rule.limit,
            lastRefill: Date.now()
        };
        const now = Date.now();
        const timePassed = now - bucket.lastRefill;
        const tokensToAdd = Math.floor(timePassed / (rule.window / rule.limit));
        // Refill tokens
        bucket.tokens = Math.min(rule.limit, bucket.tokens + tokensToAdd);
        bucket.lastRefill = now;
        if (bucket.tokens < 1) {
            const refillTime = bucket.lastRefill + rule.window / rule.limit;
            return {
                allowed: false,
                reason: 'RATE_LIMIT_EXCEEDED',
                resetTime: refillTime,
                retryAfter: Math.ceil((refillTime - now) / 1000),
                remaining: 0
            };
        }
        // Consume token
        bucket.tokens -= 1;
        store.setTokenBucket(identifier, bucket);
        return {
            allowed: true,
            remaining: Math.floor(bucket.tokens),
            resetTime: now + rule.window
        };
    }
    // Fixed window rate limiting
    async fixedWindowCheck(rule, identifier) {
        const store = this.getStore(rule.name);
        const now = Date.now();
        const windowStart = Math.floor(now / rule.window) * rule.window;
        const windowKey = `${identifier}:${windowStart}`;
        const count = store.getWindowCount(windowKey) || 0;
        if (count >= rule.limit) {
            const resetTime = windowStart + rule.window;
            return {
                allowed: false,
                reason: 'RATE_LIMIT_EXCEEDED',
                resetTime,
                retryAfter: Math.ceil((resetTime - now) / 1000),
                remaining: 0
            };
        }
        // Increment counter
        store.incrementWindowCount(windowKey, rule.window);
        return {
            allowed: true,
            remaining: rule.limit - count - 1,
            resetTime: windowStart + rule.window
        };
    }
    // Distributed rate limiting for multi-server setups
    async distributedCheck(rule, identifier) {
        if (!rule.distributed) {
            throw new Error('Rule is not configured for distributed rate limiting');
        }
        // Use Redis or similar for distributed state
        const distributedStore = await this.getDistributedStore();
        const key = `rate_limit:${rule.name}:${identifier}`;
        const pipeline = distributedStore.pipeline();
        pipeline.incr(key);
        pipeline.expire(key, Math.ceil(rule.window / 1000));
        const results = await pipeline.exec();
        const count = results[0][1];
        if (count > rule.limit) {
            const ttl = await distributedStore.ttl(key);
            const resetTime = Date.now() + ttl * 1000;
            return {
                allowed: false,
                reason: 'RATE_LIMIT_EXCEEDED',
                resetTime,
                retryAfter: ttl,
                remaining: 0
            };
        }
        return {
            allowed: true,
            remaining: rule.limit - count,
            resetTime: Date.now() + rule.window
        };
    }
    // Adaptive rate limiting based on user behavior
    async adaptiveCheck(rule, identifier, request) {
        const userProfile = await this.getUserProfile(identifier);
        // Adjust limits based on user tier
        let adjustedLimit = rule.limit;
        switch(userProfile.tier){
            case 'premium':
                adjustedLimit *= 2;
                break;
            case 'enterprise':
                adjustedLimit *= 5;
                break;
            case 'free':
                adjustedLimit *= 0.5;
                break;
        }
        // Adjust based on user reputation
        if (userProfile.reputation > 0.8) {
            adjustedLimit *= 1.5;
        } else if (userProfile.reputation < 0.3) {
            adjustedLimit *= 0.5;
        }
        // Create adjusted rule
        const adjustedRule = {
            ...rule,
            limit: Math.floor(adjustedLimit)
        };
        return this.slidingWindowCheck(adjustedRule, identifier);
    }
    // IP-based geographic rate limiting
    async geographicCheck(rule, request) {
        if (!rule.geographic) return {
            allowed: true
        };
        const location = await this.getIPLocation(request.ip);
        const geoRule = rule.geographic[location.country] || rule.geographic.default;
        if (!geoRule) return {
            allowed: true
        };
        const adjustedRule = {
            ...rule,
            ...geoRule
        };
        return this.slidingWindowCheck(adjustedRule, request.ip);
    }
    // Burst protection
    async burstProtectionCheck(rule, identifier) {
        if (!rule.burstProtection) return {
            allowed: true
        };
        const store = this.getStore(rule.name);
        const now = Date.now();
        const burstWindow = rule.burstProtection.window || 1000; // 1 second default
        const burstLimit = rule.burstProtection.limit || 5;
        const recentRequests = store.getRequestsInWindow(identifier, now - burstWindow, now);
        if (recentRequests.length >= burstLimit) {
            return {
                allowed: false,
                reason: 'BURST_LIMIT_EXCEEDED',
                resetTime: now + burstWindow,
                retryAfter: Math.ceil(burstWindow / 1000)
            };
        }
        return {
            allowed: true
        };
    }
    // Whitelist/Blacklist management
    addToWhitelist(ip) {
        this.whitelistedIPs.add(ip);
        this.emit('whitelist:added', {
            ip
        });
    }
    removeFromWhitelist(ip) {
        this.whitelistedIPs.delete(ip);
        this.emit('whitelist:removed', {
            ip
        });
    }
    addToBlacklist(ip, duration) {
        this.blacklistedIPs.add(ip);
        this.emit('blacklist:added', {
            ip,
            duration
        });
        if (duration) {
            setTimeout(()=>{
                this.removeFromBlacklist(ip);
            }, duration);
        }
    }
    removeFromBlacklist(ip) {
        this.blacklistedIPs.delete(ip);
        this.emit('blacklist:removed', {
            ip
        });
    }
    // Suspicious activity detection
    trackSuspiciousActivity(ip, rule) {
        const activity = this.suspiciousActivity.get(ip) || {
            violations: 0,
            firstViolation: Date.now(),
            lastViolation: Date.now(),
            rules: new Set()
        };
        activity.violations++;
        activity.lastViolation = Date.now();
        activity.rules.add(rule.name);
        this.suspiciousActivity.set(ip, activity);
        // Auto-blacklist after threshold
        if (activity.violations >= 10) {
            this.addToBlacklist(ip, 3600000); // 1 hour
            this.emit('security:autoBlacklist', {
                ip,
                activity
            });
        }
    }
    // Get rate limit statistics
    async getStatistics(timeRange = '1h') {
        const stats = {
            totalRequests: 0,
            blockedRequests: 0,
            topBlockedIPs: [],
            topBlockedEndpoints: [],
            rules: []
        };
        // Aggregate statistics from all stores
        for (const [ruleName, store] of this.stores){
            const ruleStats = store.getStatistics(timeRange);
            stats.totalRequests += ruleStats.totalRequests;
            stats.blockedRequests += ruleStats.blockedRequests;
            stats.rules.push({
                name: ruleName,
                ...ruleStats
            });
        }
        return stats;
    }
    // Private helper methods
    initializeDefaultRules() {
        // Global API rate limit
        this.addRule({
            name: 'global_api',
            endpoint: '/api/*',
            limit: 1000,
            window: 3600000,
            algorithm: 'sliding_window',
            priority: 1
        });
        // Authentication endpoints
        this.addRule({
            name: 'auth_strict',
            endpoint: '/api/auth/*',
            limit: 5,
            window: 900000,
            algorithm: 'fixed_window',
            priority: 10,
            burstProtection: {
                limit: 3,
                window: 60000 // 1 minute
            }
        });
        // Upload endpoints
        this.addRule({
            name: 'upload_limit',
            endpoint: '/api/upload',
            limit: 50,
            window: 3600000,
            algorithm: 'token_bucket',
            priority: 5
        });
        // Email campaign endpoints
        this.addRule({
            name: 'email_campaigns',
            endpoint: '/api/email-campaigns/*',
            limit: 100,
            window: 3600000,
            algorithm: 'sliding_window',
            priority: 3
        });
    }
    getIdentifier(request) {
        // Use user ID if authenticated, otherwise IP
        return request.userId || request.ip;
    }
    getRulesForRequest(request) {
        const matchingRules = [];
        for (const [endpoint, rules] of this.rules){
            if (this.endpointMatches(endpoint, request.endpoint)) {
                matchingRules.push(...rules);
            }
        }
        return matchingRules.sort((a, b)=>(b.priority || 0) - (a.priority || 0));
    }
    endpointMatches(pattern, endpoint) {
        if (pattern === '*') return true;
        if (pattern === endpoint) return true;
        // Simple wildcard matching
        const regex = new RegExp('^' + pattern.replace(/\*/g, '.*') + '$');
        return regex.test(endpoint);
    }
    async checkRule(rule, identifier, request) {
        // Check burst protection first
        const burstResult = await this.burstProtectionCheck(rule, identifier);
        if (!burstResult.allowed) return burstResult;
        // Check geographic restrictions
        const geoResult = await this.geographicCheck(rule, request);
        if (!geoResult.allowed) return geoResult;
        // Apply the main algorithm
        switch(rule.algorithm){
            case 'sliding_window':
                return this.slidingWindowCheck(rule, identifier);
            case 'token_bucket':
                return this.tokenBucketCheck(rule, identifier);
            case 'fixed_window':
                return this.fixedWindowCheck(rule, identifier);
            case 'adaptive':
                return this.adaptiveCheck(rule, identifier, request);
            case 'distributed':
                return this.distributedCheck(rule, identifier);
            default:
                return this.slidingWindowCheck(rule, identifier);
        }
    }
    async checkGlobalLimits(request) {
        // Check global IP limit
        const ipLimit = this.globalLimits.get('ip_global');
        if (ipLimit) {
            const store = this.getStore('global_ip');
            const requests = store.getRequestsInWindow(request.ip, Date.now() - ipLimit.window, Date.now());
            if (requests.length >= ipLimit.limit) {
                return {
                    allowed: false,
                    reason: 'GLOBAL_IP_LIMIT_EXCEEDED',
                    resetTime: Date.now() + ipLimit.window,
                    retryAfter: Math.ceil(ipLimit.window / 1000)
                };
            }
        }
        return {
            allowed: true
        };
    }
    getStore(name) {
        if (!this.stores.has(name)) {
            this.stores.set(name, new InMemoryRateLimitStore());
        }
        return this.stores.get(name);
    }
    async recordRequest(identifier, request) {
        // Record in all applicable stores
        const rules = this.getRulesForRequest(request);
        for (const rule of rules){
            const store = this.getStore(rule.name);
            store.recordRequest(identifier, Date.now());
        }
    }
    async getRemainingCount(rules, identifier) {
        let minRemaining = Infinity;
        for (const rule of rules){
            const result = await this.checkRule(rule, identifier, {});
            if (result.remaining !== undefined && result.remaining < minRemaining) {
                minRemaining = result.remaining;
            }
        }
        return minRemaining === Infinity ? 0 : minRemaining;
    }
    applyLoadBasedLimits(factor) {
        for (const [endpoint, rules] of this.rules){
            rules.forEach((rule)=>{
                if (!rule.originalLimit) {
                    rule.originalLimit = rule.limit;
                }
                rule.limit = Math.floor(rule.originalLimit * factor);
            });
        }
    }
    startCleanupTimer() {
        setInterval(()=>{
            this.cleanup();
        }, 300000); // 5 minutes
    }
    cleanup() {
        const now = Date.now();
        const cleanupAge = 3600000; // 1 hour
        // Clean up old suspicious activity records
        for (const [ip, activity] of this.suspiciousActivity){
            if (now - activity.lastViolation > cleanupAge) {
                this.suspiciousActivity.delete(ip);
            }
        }
        // Clean up store data
        for (const store of this.stores.values()){
            store.cleanup();
        }
    }
    // Mock implementations for external services
    async getSystemLoad() {
        return Math.random() * 100;
    }
    async getDatabaseLoad() {
        return Math.random() * 100;
    }
    async getDistributedStore() {
        // Mock Redis client
        return {
            pipeline: ()=>({
                    incr: ()=>{},
                    expire: ()=>{},
                    exec: ()=>Promise.resolve([
                            [
                                null,
                                1
                            ]
                        ])
                }),
            ttl: ()=>Promise.resolve(60)
        };
    }
    async getUserProfile(identifier) {
        return {
            tier: 'free',
            reputation: 0.5
        };
    }
    async getIPLocation(ip) {
        return {
            country: 'US',
            region: 'CA'
        };
    }
}
// In-memory rate limit store implementation
class InMemoryRateLimitStore {
    getRequestsInWindow(identifier, windowStart, windowEnd) {
        const requests = this.requests.get(identifier) || [];
        return requests.filter((time)=>time >= windowStart && time <= windowEnd);
    }
    recordRequest(identifier, timestamp) {
        if (!this.requests.has(identifier)) {
            this.requests.set(identifier, []);
        }
        this.requests.get(identifier).push(timestamp);
    }
    getWindowCount(windowKey) {
        const entry = this.windowCounts.get(windowKey);
        if (!entry || Date.now() > entry.expiry) {
            return 0;
        }
        return entry.count;
    }
    incrementWindowCount(windowKey, windowDuration) {
        const entry = this.windowCounts.get(windowKey) || {
            count: 0,
            expiry: 0
        };
        entry.count++;
        entry.expiry = Date.now() + windowDuration;
        this.windowCounts.set(windowKey, entry);
    }
    getTokenBucket(identifier) {
        return this.tokenBuckets.get(identifier) || null;
    }
    setTokenBucket(identifier, bucket) {
        this.tokenBuckets.set(identifier, bucket);
    }
    getStatistics(timeRange) {
        return {
            totalRequests: 0,
            blockedRequests: 0
        };
    }
    cleanup() {
        const now = Date.now();
        const cleanupAge = 3600000; // 1 hour
        // Clean up old requests
        for (const [identifier, requests] of this.requests){
            const filtered = requests.filter((time)=>now - time < cleanupAge);
            if (filtered.length === 0) {
                this.requests.delete(identifier);
            } else {
                this.requests.set(identifier, filtered);
            }
        }
        // Clean up expired window counts
        for (const [windowKey, entry] of this.windowCounts){
            if (now > entry.expiry) {
                this.windowCounts.delete(windowKey);
            }
        }
    }
    constructor(){
        this.requests = new Map();
        this.windowCounts = new Map();
        this.tokenBuckets = new Map();
    }
}
const advancedRateLimiter = new AdvancedRateLimiter();

//# sourceMappingURL=data:application/json;base64,