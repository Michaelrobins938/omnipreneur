{"version":3,"sources":["C:\\Users\\Micha\\Favorites\\Downloads\\omnipreneur\\app\\api\\upload\\route.ts"],"sourcesContent":["// @ts-nocheck\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { requireAuth } from '@/lib/auth';\r\nimport { fileProcessor } from '@/lib/upload/file-processor';\r\nimport { z } from 'zod';\r\n\r\nconst UploadConfigSchema = z.object({\r\n  maxFiles: z.number().min(1).max(50).default(10),\r\n  generateThumbnails: z.boolean().default(true),\r\n  extractText: z.boolean().default(false),\r\n  virusScan: z.boolean().default(true),\r\n  processImages: z.boolean().default(true),\r\n  processDocuments: z.boolean().default(false)\r\n});\r\n\r\n/**\r\n * POST /api/upload\r\n * \r\n * Upload single or multiple files with processing\r\n * \r\n * Authentication: Required\r\n * Content-Type: multipart/form-data\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const user = (request as any).user;\r\n    \r\n    // Check subscription limits\r\n    const subscription = await getUserSubscription(user.userId);\r\n    const uploadLimits = getUploadLimits(subscription.plan);\r\n    \r\n    const formData = await request.formData();\r\n    const files = formData.getAll('files') as File[];\r\n    const configData = formData.get('config');\r\n    \r\n    // Parse upload configuration\r\n    const config = configData ? \r\n      UploadConfigSchema.parse(JSON.parse(configData as string)) : \r\n      UploadConfigSchema.parse({});\r\n    \r\n    // Validate upload count\r\n    if (files.length === 0) {\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: { \r\n            code: 'NO_FILES', \r\n            message: 'No files provided for upload' \r\n          } \r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    if (files.length > config.maxFiles) {\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: { \r\n            code: 'TOO_MANY_FILES', \r\n            message: `Maximum ${config.maxFiles} files allowed per upload` \r\n          } \r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    // Check file size limits\r\n    const totalSize = files.reduce((sum, file) => sum + file.size, 0);\r\n    if (totalSize > uploadLimits.maxTotalSize) {\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: { \r\n            code: 'SIZE_LIMIT_EXCEEDED', \r\n            message: `Total upload size exceeds ${uploadLimits.maxTotalSize / (1024 * 1024)}MB limit` \r\n          } \r\n        },\r\n        { status: 413 }\r\n      );\r\n    }\r\n    \r\n    // Check monthly upload quota\r\n    const currentUsage = await getUserUploadUsage(user.userId);\r\n    if (currentUsage.monthlyUploads >= uploadLimits.monthlyQuota) {\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: { \r\n            code: 'QUOTA_EXCEEDED', \r\n            message: `Monthly upload quota of ${uploadLimits.monthlyQuota} files exceeded`,\r\n            upgradeUrl: '/pricing'\r\n          } \r\n        },\r\n        { status: 429 }\r\n      );\r\n    }\r\n    \r\n    // Setup upload options\r\n    const uploadOptions = {\r\n      userId: user.userId,\r\n      validator: createFileValidator(uploadLimits),\r\n      imageProcessing: config.processImages ? {\r\n        generateThumbnails: config.generateThumbnails,\r\n        thumbnailSizes: [\r\n          { width: 150, height: 150, suffix: 'thumb' },\r\n          { width: 400, height: 400, suffix: 'medium' },\r\n          { width: 800, height: 600, suffix: 'large' }\r\n        ],\r\n        optimize: true,\r\n        format: 'webp' as const,\r\n        quality: 85\r\n      } : undefined,\r\n      documentProcessing: config.processDocuments ? {\r\n        extractText: config.extractText,\r\n        generatePreview: true,\r\n        convertToPdf: false\r\n      } : undefined,\r\n      concurrency: Math.min(3, files.length)\r\n    };\r\n    \r\n    // Process uploads\r\n    let result;\r\n    \r\n    if (files.length === 1) {\r\n      // Single file upload\r\n      result = await fileProcessor.uploadFile(files[0], uploadOptions);\r\n      \r\n      // Update usage counter\r\n      await updateUploadUsage(user.userId, 1);\r\n      \r\n      return NextResponse.json({\r\n        success: true,\r\n        data: {\r\n          upload: result,\r\n          remaining: uploadLimits.monthlyQuota - currentUsage.monthlyUploads - 1\r\n        }\r\n      });\r\n      \r\n    } else {\r\n      // Batch upload\r\n      result = await fileProcessor.uploadMultiple(files, uploadOptions);\r\n      \r\n      // Update usage counter\r\n      await updateUploadUsage(user.userId, result.successful);\r\n      \r\n      return NextResponse.json({\r\n        success: true,\r\n        data: {\r\n          batch: result,\r\n          remaining: uploadLimits.monthlyQuota - currentUsage.monthlyUploads - result.successful\r\n        }\r\n      });\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('Upload error:', error);\r\n    \r\n    if (error?.name === 'ZodError') {\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: { \r\n            code: 'VALIDATION_ERROR', \r\n            message: 'Invalid upload configuration',\r\n            details: error.errors \r\n          } \r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        success: false, \r\n        error: { \r\n          code: 'UPLOAD_ERROR', \r\n          message: error.message || 'Upload failed' \r\n        } \r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * GET /api/upload\r\n * \r\n * Get upload status and user uploads\r\n * \r\n * Authentication: Required\r\n * \r\n * Query Parameters:\r\n * - uploadId: string (get specific upload status)\r\n * - page: number\r\n * - limit: number\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const user = (request as any).user;\r\n    const { searchParams } = new URL(request.url);\r\n    \r\n    const uploadId = searchParams.get('uploadId');\r\n    \r\n    if (uploadId) {\r\n      // Get specific upload status\r\n      const status = fileProcessor.getUploadStatus(uploadId);\r\n      \r\n      if (!status) {\r\n        return NextResponse.json(\r\n          { \r\n            success: false, \r\n            error: { \r\n              code: 'UPLOAD_NOT_FOUND', \r\n              message: 'Upload not found' \r\n            } \r\n          },\r\n          { status: 404 }\r\n        );\r\n      }\r\n      \r\n      // Check if user owns this upload\r\n      if (status.options.userId !== user.userId) {\r\n        return NextResponse.json(\r\n          { \r\n            success: false, \r\n            error: { \r\n              code: 'ACCESS_DENIED', \r\n              message: 'Access denied' \r\n            } \r\n          },\r\n          { status: 403 }\r\n        );\r\n      }\r\n      \r\n      return NextResponse.json({\r\n        success: true,\r\n        data: { upload: status }\r\n      });\r\n      \r\n    } else {\r\n      // Get user uploads\r\n      const page = parseInt(searchParams.get('page') || '1');\r\n      const limit = parseInt(searchParams.get('limit') || '20');\r\n      \r\n      const uploads = fileProcessor.getUserUploads(user.userId, { page, limit });\r\n      const usage = await getUserUploadUsage(user.userId);\r\n      \r\n      return NextResponse.json({\r\n        success: true,\r\n        data: {\r\n          uploads: uploads.uploads,\r\n          pagination: uploads.pagination,\r\n          usage: {\r\n            monthlyUploads: usage.monthlyUploads,\r\n            totalStorage: usage.totalStorage,\r\n            quota: getUploadLimits(usage.plan)\r\n          }\r\n        }\r\n      });\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('Get uploads error:', error);\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        success: false, \r\n        error: { \r\n          code: 'FETCH_ERROR', \r\n          message: 'Failed to fetch uploads' \r\n        } \r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * DELETE /api/upload\r\n * \r\n * Delete upload\r\n * \r\n * Authentication: Required\r\n * \r\n * Query Parameters:\r\n * - uploadId: string (required)\r\n */\r\nexport async function DELETE(request: NextRequest) {\r\n  try {\r\n    const user = (request as any).user;\r\n    const { searchParams } = new URL(request.url);\r\n    \r\n    const uploadId = searchParams.get('uploadId');\r\n    \r\n    if (!uploadId) {\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: { \r\n            code: 'MISSING_UPLOAD_ID', \r\n            message: 'Upload ID is required' \r\n          } \r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    // Check if upload exists and belongs to user\r\n    const upload = fileProcessor.getUploadStatus(uploadId);\r\n    \r\n    if (!upload) {\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: { \r\n            code: 'UPLOAD_NOT_FOUND', \r\n            message: 'Upload not found' \r\n          } \r\n        },\r\n        { status: 404 }\r\n      );\r\n    }\r\n    \r\n    if (upload.options.userId !== user.userId) {\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: { \r\n            code: 'ACCESS_DENIED', \r\n            message: 'Access denied' \r\n          } \r\n        },\r\n        { status: 403 }\r\n      );\r\n    }\r\n    \r\n    // Delete upload\r\n    const deleted = await fileProcessor.deleteUpload(uploadId);\r\n    \r\n    if (!deleted) {\r\n      return NextResponse.json(\r\n        { \r\n          success: false, \r\n          error: { \r\n            code: 'DELETE_FAILED', \r\n            message: 'Failed to delete upload' \r\n          } \r\n        },\r\n        { status: 500 }\r\n      );\r\n    }\r\n    \r\n    // Update usage counter\r\n    await updateUploadUsage(user.userId, -1);\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      data: { message: 'Upload deleted successfully' }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Delete upload error:', error);\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        success: false, \r\n        error: { \r\n          code: 'DELETE_ERROR', \r\n          message: 'Failed to delete upload' \r\n        } \r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Helper functions\r\nasync function getUserSubscription(userId: string): Promise<{ plan: string }> {\r\n  // Mock implementation - replace with actual database query\r\n  return { plan: 'PRO' };\r\n}\r\n\r\nasync function getUserUploadUsage(userId: string): Promise<{ monthlyUploads: number; totalStorage: number; plan: string }> {\r\n  // Mock implementation - replace with actual database query\r\n  return {\r\n    monthlyUploads: 25,\r\n    totalStorage: 512 * 1024 * 1024, // 512MB\r\n    plan: 'PRO'\r\n  };\r\n}\r\n\r\nasync function updateUploadUsage(userId: string, increment: number): Promise<void> {\r\n  // Mock implementation - replace with actual database update\r\n  console.log(`Updating upload usage for user ${userId}: ${increment}`);\r\n}\r\n\r\nfunction getUploadLimits(plan: string): any {\r\n  const limits = {\r\n    FREE: {\r\n      maxFileSize: 10 * 1024 * 1024, // 10MB\r\n      maxTotalSize: 50 * 1024 * 1024, // 50MB\r\n      monthlyQuota: 20,\r\n      allowedTypes: ['image/jpeg', 'image/png', 'text/plain']\r\n    },\r\n    PRO: {\r\n      maxFileSize: 100 * 1024 * 1024, // 100MB\r\n      maxTotalSize: 500 * 1024 * 1024, // 500MB\r\n      monthlyQuota: 200,\r\n      allowedTypes: ['*'] // All types\r\n    },\r\n    ENTERPRISE: {\r\n      maxFileSize: 1024 * 1024 * 1024, // 1GB\r\n      maxTotalSize: 5 * 1024 * 1024 * 1024, // 5GB\r\n      monthlyQuota: -1, // Unlimited\r\n      allowedTypes: ['*'] // All types\r\n    }\r\n  };\r\n  \r\n  return limits[plan as keyof typeof limits] || limits.FREE;\r\n}\r\n\r\nfunction createFileValidator(limits: any) {\r\n  return async (file: File): Promise<{ valid: boolean; error?: string }> => {\r\n    // File size validation\r\n    if (file.size > limits.maxFileSize) {\r\n      return {\r\n        valid: false,\r\n        error: `File size exceeds ${limits.maxFileSize / (1024 * 1024)}MB limit`\r\n      };\r\n    }\r\n    \r\n    // File type validation\r\n    if (limits.allowedTypes[0] !== '*' && !limits.allowedTypes.includes(file.type)) {\r\n      return {\r\n        valid: false,\r\n        error: `File type ${file.type} is not allowed`\r\n      };\r\n    }\r\n    \r\n    // File name validation\r\n    if (!/^[a-zA-Z0-9._-]+$/.test(file.name)) {\r\n      return {\r\n        valid: false,\r\n        error: 'File name contains invalid characters'\r\n      };\r\n    }\r\n    \r\n    return { valid: true };\r\n  };\r\n}"],"names":["DELETE","GET","POST","UploadConfigSchema","z","object","maxFiles","number","min","max","default","generateThumbnails","boolean","extractText","virusScan","processImages","processDocuments","request","user","subscription","getUserSubscription","userId","uploadLimits","getUploadLimits","plan","formData","files","getAll","configData","get","config","parse","JSON","length","NextResponse","json","success","error","code","message","status","totalSize","reduce","sum","file","size","maxTotalSize","currentUsage","getUserUploadUsage","monthlyUploads","monthlyQuota","upgradeUrl","uploadOptions","validator","createFileValidator","imageProcessing","thumbnailSizes","width","height","suffix","optimize","format","quality","undefined","documentProcessing","generatePreview","convertToPdf","concurrency","Math","result","fileProcessor","uploadFile","updateUploadUsage","data","upload","remaining","uploadMultiple","successful","batch","console","name","details","errors","searchParams","URL","url","uploadId","getUploadStatus","options","page","parseInt","limit","uploads","getUserUploads","usage","pagination","totalStorage","quota","deleted","deleteUpload","increment","log","limits","FREE","maxFileSize","allowedTypes","PRO","ENTERPRISE","valid","includes","type","test"],"mappings":"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"}