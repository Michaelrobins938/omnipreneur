1d0236928987102051f6d5649a1a552f
// @ts-nocheck
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get DELETE () {
        return DELETE;
    },
    get GET () {
        return GET;
    },
    get POST () {
        return POST;
    }
});
const _server = require("next/server");
const _fileprocessor = require("../../../lib/upload/file-processor");
const _zod = require("zod");
const UploadConfigSchema = _zod.z.object({
    maxFiles: _zod.z.number().min(1).max(50).default(10),
    generateThumbnails: _zod.z.boolean().default(true),
    extractText: _zod.z.boolean().default(false),
    virusScan: _zod.z.boolean().default(true),
    processImages: _zod.z.boolean().default(true),
    processDocuments: _zod.z.boolean().default(false)
});
async function POST(request) {
    try {
        const user = request.user;
        // Check subscription limits
        const subscription = await getUserSubscription(user.userId);
        const uploadLimits = getUploadLimits(subscription.plan);
        const formData = await request.formData();
        const files = formData.getAll('files');
        const configData = formData.get('config');
        // Parse upload configuration
        const config = configData ? UploadConfigSchema.parse(JSON.parse(configData)) : UploadConfigSchema.parse({});
        // Validate upload count
        if (files.length === 0) {
            return _server.NextResponse.json({
                success: false,
                error: {
                    code: 'NO_FILES',
                    message: 'No files provided for upload'
                }
            }, {
                status: 400
            });
        }
        if (files.length > config.maxFiles) {
            return _server.NextResponse.json({
                success: false,
                error: {
                    code: 'TOO_MANY_FILES',
                    message: `Maximum ${config.maxFiles} files allowed per upload`
                }
            }, {
                status: 400
            });
        }
        // Check file size limits
        const totalSize = files.reduce((sum, file)=>sum + file.size, 0);
        if (totalSize > uploadLimits.maxTotalSize) {
            return _server.NextResponse.json({
                success: false,
                error: {
                    code: 'SIZE_LIMIT_EXCEEDED',
                    message: `Total upload size exceeds ${uploadLimits.maxTotalSize / (1024 * 1024)}MB limit`
                }
            }, {
                status: 413
            });
        }
        // Check monthly upload quota
        const currentUsage = await getUserUploadUsage(user.userId);
        if (currentUsage.monthlyUploads >= uploadLimits.monthlyQuota) {
            return _server.NextResponse.json({
                success: false,
                error: {
                    code: 'QUOTA_EXCEEDED',
                    message: `Monthly upload quota of ${uploadLimits.monthlyQuota} files exceeded`,
                    upgradeUrl: '/pricing'
                }
            }, {
                status: 429
            });
        }
        // Setup upload options
        const uploadOptions = {
            userId: user.userId,
            validator: createFileValidator(uploadLimits),
            imageProcessing: config.processImages ? {
                generateThumbnails: config.generateThumbnails,
                thumbnailSizes: [
                    {
                        width: 150,
                        height: 150,
                        suffix: 'thumb'
                    },
                    {
                        width: 400,
                        height: 400,
                        suffix: 'medium'
                    },
                    {
                        width: 800,
                        height: 600,
                        suffix: 'large'
                    }
                ],
                optimize: true,
                format: 'webp',
                quality: 85
            } : undefined,
            documentProcessing: config.processDocuments ? {
                extractText: config.extractText,
                generatePreview: true,
                convertToPdf: false
            } : undefined,
            concurrency: Math.min(3, files.length)
        };
        // Process uploads
        let result;
        if (files.length === 1) {
            // Single file upload
            result = await _fileprocessor.fileProcessor.uploadFile(files[0], uploadOptions);
            // Update usage counter
            await updateUploadUsage(user.userId, 1);
            return _server.NextResponse.json({
                success: true,
                data: {
                    upload: result,
                    remaining: uploadLimits.monthlyQuota - currentUsage.monthlyUploads - 1
                }
            });
        } else {
            // Batch upload
            result = await _fileprocessor.fileProcessor.uploadMultiple(files, uploadOptions);
            // Update usage counter
            await updateUploadUsage(user.userId, result.successful);
            return _server.NextResponse.json({
                success: true,
                data: {
                    batch: result,
                    remaining: uploadLimits.monthlyQuota - currentUsage.monthlyUploads - result.successful
                }
            });
        }
    } catch (error) {
        console.error('Upload error:', error);
        if (error?.name === 'ZodError') {
            return _server.NextResponse.json({
                success: false,
                error: {
                    code: 'VALIDATION_ERROR',
                    message: 'Invalid upload configuration',
                    details: error.errors
                }
            }, {
                status: 400
            });
        }
        return _server.NextResponse.json({
            success: false,
            error: {
                code: 'UPLOAD_ERROR',
                message: error.message || 'Upload failed'
            }
        }, {
            status: 500
        });
    }
}
async function GET(request) {
    try {
        const user = request.user;
        const { searchParams } = new URL(request.url);
        const uploadId = searchParams.get('uploadId');
        if (uploadId) {
            // Get specific upload status
            const status = _fileprocessor.fileProcessor.getUploadStatus(uploadId);
            if (!status) {
                return _server.NextResponse.json({
                    success: false,
                    error: {
                        code: 'UPLOAD_NOT_FOUND',
                        message: 'Upload not found'
                    }
                }, {
                    status: 404
                });
            }
            // Check if user owns this upload
            if (status.options.userId !== user.userId) {
                return _server.NextResponse.json({
                    success: false,
                    error: {
                        code: 'ACCESS_DENIED',
                        message: 'Access denied'
                    }
                }, {
                    status: 403
                });
            }
            return _server.NextResponse.json({
                success: true,
                data: {
                    upload: status
                }
            });
        } else {
            // Get user uploads
            const page = parseInt(searchParams.get('page') || '1');
            const limit = parseInt(searchParams.get('limit') || '20');
            const uploads = _fileprocessor.fileProcessor.getUserUploads(user.userId, {
                page,
                limit
            });
            const usage = await getUserUploadUsage(user.userId);
            return _server.NextResponse.json({
                success: true,
                data: {
                    uploads: uploads.uploads,
                    pagination: uploads.pagination,
                    usage: {
                        monthlyUploads: usage.monthlyUploads,
                        totalStorage: usage.totalStorage,
                        quota: getUploadLimits(usage.plan)
                    }
                }
            });
        }
    } catch (error) {
        console.error('Get uploads error:', error);
        return _server.NextResponse.json({
            success: false,
            error: {
                code: 'FETCH_ERROR',
                message: 'Failed to fetch uploads'
            }
        }, {
            status: 500
        });
    }
}
async function DELETE(request) {
    try {
        const user = request.user;
        const { searchParams } = new URL(request.url);
        const uploadId = searchParams.get('uploadId');
        if (!uploadId) {
            return _server.NextResponse.json({
                success: false,
                error: {
                    code: 'MISSING_UPLOAD_ID',
                    message: 'Upload ID is required'
                }
            }, {
                status: 400
            });
        }
        // Check if upload exists and belongs to user
        const upload = _fileprocessor.fileProcessor.getUploadStatus(uploadId);
        if (!upload) {
            return _server.NextResponse.json({
                success: false,
                error: {
                    code: 'UPLOAD_NOT_FOUND',
                    message: 'Upload not found'
                }
            }, {
                status: 404
            });
        }
        if (upload.options.userId !== user.userId) {
            return _server.NextResponse.json({
                success: false,
                error: {
                    code: 'ACCESS_DENIED',
                    message: 'Access denied'
                }
            }, {
                status: 403
            });
        }
        // Delete upload
        const deleted = await _fileprocessor.fileProcessor.deleteUpload(uploadId);
        if (!deleted) {
            return _server.NextResponse.json({
                success: false,
                error: {
                    code: 'DELETE_FAILED',
                    message: 'Failed to delete upload'
                }
            }, {
                status: 500
            });
        }
        // Update usage counter
        await updateUploadUsage(user.userId, -1);
        return _server.NextResponse.json({
            success: true,
            data: {
                message: 'Upload deleted successfully'
            }
        });
    } catch (error) {
        console.error('Delete upload error:', error);
        return _server.NextResponse.json({
            success: false,
            error: {
                code: 'DELETE_ERROR',
                message: 'Failed to delete upload'
            }
        }, {
            status: 500
        });
    }
}
// Helper functions
async function getUserSubscription(userId) {
    // Mock implementation - replace with actual database query
    return {
        plan: 'PRO'
    };
}
async function getUserUploadUsage(userId) {
    // Mock implementation - replace with actual database query
    return {
        monthlyUploads: 25,
        totalStorage: 512 * 1024 * 1024,
        plan: 'PRO'
    };
}
async function updateUploadUsage(userId, increment) {
    // Mock implementation - replace with actual database update
    console.log(`Updating upload usage for user ${userId}: ${increment}`);
}
function getUploadLimits(plan) {
    const limits = {
        FREE: {
            maxFileSize: 10 * 1024 * 1024,
            maxTotalSize: 50 * 1024 * 1024,
            monthlyQuota: 20,
            allowedTypes: [
                'image/jpeg',
                'image/png',
                'text/plain'
            ]
        },
        PRO: {
            maxFileSize: 100 * 1024 * 1024,
            maxTotalSize: 500 * 1024 * 1024,
            monthlyQuota: 200,
            allowedTypes: [
                '*'
            ] // All types
        },
        ENTERPRISE: {
            maxFileSize: 1024 * 1024 * 1024,
            maxTotalSize: 5 * 1024 * 1024 * 1024,
            monthlyQuota: -1,
            allowedTypes: [
                '*'
            ] // All types
        }
    };
    return limits[plan] || limits.FREE;
}
function createFileValidator(limits) {
    return async (file)=>{
        // File size validation
        if (file.size > limits.maxFileSize) {
            return {
                valid: false,
                error: `File size exceeds ${limits.maxFileSize / (1024 * 1024)}MB limit`
            };
        }
        // File type validation
        if (limits.allowedTypes[0] !== '*' && !limits.allowedTypes.includes(file.type)) {
            return {
                valid: false,
                error: `File type ${file.type} is not allowed`
            };
        }
        // File name validation
        if (!/^[a-zA-Z0-9._-]+$/.test(file.name)) {
            return {
                valid: false,
                error: 'File name contains invalid characters'
            };
        }
        return {
            valid: true
        };
    };
}

//# sourceMappingURL=data:application/json;base64,