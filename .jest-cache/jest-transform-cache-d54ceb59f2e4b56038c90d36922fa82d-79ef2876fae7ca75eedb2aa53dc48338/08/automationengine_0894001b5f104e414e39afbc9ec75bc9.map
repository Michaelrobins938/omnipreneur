{"version":3,"sources":["C:\\Users\\Micha\\Favorites\\Downloads\\omnipreneur\\lib\\email\\automation-engine.ts"],"sourcesContent":["// @ts-nocheck\r\nimport { EventEmitter } from 'events';\r\nimport { z } from 'zod';\r\n\r\n// Email automation engine with advanced scheduling and triggers\r\nexport class EmailAutomationEngine extends EventEmitter {\r\n  private campaigns: Map<string, EmailCampaign> = new Map();\r\n  private automations: Map<string, EmailAutomation> = new Map();\r\n  private scheduledJobs: Map<string, NodeJS.Timeout> = new Map();\r\n  private triggers: Map<string, TriggerHandler> = new Map();\r\n\r\n  constructor() {\r\n    super();\r\n    this.initializeDefaultTriggers();\r\n  }\r\n\r\n  // Campaign management\r\n  async createCampaign(campaignData: CreateCampaignData): Promise<EmailCampaign> {\r\n    const campaign: EmailCampaign = {\r\n      id: `campaign_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      ...campaignData,\r\n      status: 'draft',\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n      metrics: {\r\n        sent: 0,\r\n        delivered: 0,\r\n        opened: 0,\r\n        clicked: 0,\r\n        bounced: 0,\r\n        unsubscribed: 0\r\n      }\r\n    };\r\n\r\n    this.campaigns.set(campaign.id, campaign);\r\n    \r\n    // If scheduled, set up the job\r\n    if (campaign.scheduledAt && campaign.scheduledAt > new Date()) {\r\n      this.scheduleJob(campaign.id, campaign.scheduledAt, () => {\r\n        this.executeCampaign(campaign.id);\r\n      });\r\n    }\r\n\r\n    this.emit('campaign:created', campaign);\r\n    return campaign;\r\n  }\r\n\r\n  async updateCampaign(campaignId: string, updates: Partial<EmailCampaign>): Promise<EmailCampaign | null> {\r\n    const campaign = this.campaigns.get(campaignId);\r\n    if (!campaign) return null;\r\n\r\n    const updatedCampaign = {\r\n      ...campaign,\r\n      ...updates,\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n\r\n    this.campaigns.set(campaignId, updatedCampaign);\r\n    \r\n    // Update scheduling if needed\r\n    if (updates.scheduledAt) {\r\n      this.cancelScheduledJob(campaignId);\r\n      if (updates.scheduledAt > new Date()) {\r\n        this.scheduleJob(campaignId, updates.scheduledAt, () => {\r\n          this.executeCampaign(campaignId);\r\n        });\r\n      }\r\n    }\r\n\r\n    this.emit('campaign:updated', updatedCampaign);\r\n    return updatedCampaign;\r\n  }\r\n\r\n  async deleteCampaign(campaignId: string): Promise<boolean> {\r\n    const campaign = this.campaigns.get(campaignId);\r\n    if (!campaign) return false;\r\n\r\n    // Cancel scheduled job if exists\r\n    this.cancelScheduledJob(campaignId);\r\n    \r\n    // Remove from campaigns\r\n    this.campaigns.delete(campaignId);\r\n    \r\n    this.emit('campaign:deleted', { campaignId });\r\n    return true;\r\n  }\r\n\r\n  // Automation workflows\r\n  async createAutomation(automationData: CreateAutomationData): Promise<EmailAutomation> {\r\n    const automation: EmailAutomation = {\r\n      id: `automation_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      ...automationData,\r\n      status: 'active',\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n      metrics: {\r\n        triggered: 0,\r\n        completed: 0,\r\n        active: 0\r\n      }\r\n    };\r\n\r\n    this.automations.set(automation.id, automation);\r\n    \r\n    // Set up triggers\r\n    this.setupAutomationTriggers(automation);\r\n    \r\n    this.emit('automation:created', automation);\r\n    return automation;\r\n  }\r\n\r\n  async triggerAutomation(automationId: string, userId: string, triggerData: any = {}): Promise<boolean> {\r\n    const automation = this.automations.get(automationId);\r\n    if (!automation || automation.status !== 'active') return false;\r\n\r\n    // Execute automation workflow\r\n    const execution = await this.executeAutomationWorkflow(automation, userId, triggerData);\r\n    \r\n    // Update metrics\r\n    automation.metrics.triggered++;\r\n    this.automations.set(automationId, automation);\r\n\r\n    this.emit('automation:triggered', { automation, userId, triggerData, execution });\r\n    return execution.success;\r\n  }\r\n\r\n  // Advanced scheduling\r\n  async scheduleRecurringCampaign(campaignData: CreateCampaignData, schedule: RecurringSchedule): Promise<string> {\r\n    const recurringId = `recurring_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    \r\n    const scheduleNextExecution = () => {\r\n      const nextDate = this.calculateNextExecutionDate(schedule);\r\n      if (nextDate) {\r\n        this.scheduleJob(`${recurringId}_${nextDate.getTime()}`, nextDate, async () => {\r\n          // Create and execute campaign instance\r\n          const instanceCampaign = await this.createCampaign({\r\n            ...campaignData,\r\n            name: `${campaignData.name} - ${nextDate.toDateString()}`,\r\n            scheduledAt: nextDate\r\n          });\r\n          \r\n          await this.executeCampaign(instanceCampaign.id);\r\n          \r\n          // Schedule next execution\r\n          scheduleNextExecution();\r\n        });\r\n      }\r\n    };\r\n\r\n    scheduleNextExecution();\r\n    return recurringId;\r\n  }\r\n\r\n  // Trigger-based automation\r\n  setupAutomationTriggers(automation: EmailAutomation) {\r\n    automation.triggers.forEach(trigger => {\r\n      const handler = this.triggers.get(trigger.type);\r\n      if (handler) {\r\n        handler.setup(automation.id, trigger.conditions, (userId: string, data: any) => {\r\n          this.triggerAutomation(automation.id, userId, data);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  // Campaign execution\r\n  async executeCampaign(campaignId: string): Promise<CampaignExecution> {\r\n    const campaign = this.campaigns.get(campaignId);\r\n    if (!campaign) {\r\n      throw new Error(`Campaign ${campaignId} not found`);\r\n    }\r\n\r\n    const execution: CampaignExecution = {\r\n      campaignId,\r\n      startedAt: new Date().toISOString(),\r\n      status: 'running',\r\n      results: {\r\n        processed: 0,\r\n        sent: 0,\r\n        failed: 0,\r\n        errors: []\r\n      }\r\n    };\r\n\r\n    try {\r\n      // Update campaign status\r\n      campaign.status = 'sending';\r\n      this.campaigns.set(campaignId, campaign);\r\n      \r\n      // Get recipient list\r\n      const recipients = await this.getRecipients(campaign.recipientSegment, campaign.userId);\r\n      \r\n      // Execute in batches to avoid overwhelming email service\r\n      const batchSize = 100;\r\n      const batches = this.chunkArray(recipients, batchSize);\r\n      \r\n      for (const batch of batches) {\r\n        await this.processBatch(campaign, batch, execution);\r\n        \r\n        // Add delay between batches\r\n        await this.delay(1000);\r\n      }\r\n      \r\n      // Update final status\r\n      execution.status = 'completed';\r\n      execution.completedAt = new Date().toISOString();\r\n      \r\n      campaign.status = 'sent';\r\n      campaign.metrics.sent = execution.results.sent;\r\n      this.campaigns.set(campaignId, campaign);\r\n      \r\n    } catch (error) {\r\n      execution.status = 'failed';\r\n      execution.error = error.message;\r\n      \r\n      campaign.status = 'failed';\r\n      this.campaigns.set(campaignId, campaign);\r\n    }\r\n\r\n    this.emit('campaign:executed', { campaign, execution });\r\n    return execution;\r\n  }\r\n\r\n  // Batch processing for email sending\r\n  private async processBatch(campaign: EmailCampaign, recipients: Recipient[], execution: CampaignExecution) {\r\n    const promises = recipients.map(async (recipient) => {\r\n      try {\r\n        execution.results.processed++;\r\n        \r\n        // Personalize content\r\n        const personalizedContent = await this.personalizeContent(campaign, recipient);\r\n        \r\n        // Send email\r\n        await this.sendEmail({\r\n          to: recipient.email,\r\n          subject: personalizedContent.subject,\r\n          content: personalizedContent.content,\r\n          campaignId: campaign.id,\r\n          recipientId: recipient.id\r\n        });\r\n        \r\n        execution.results.sent++;\r\n        \r\n      } catch (error) {\r\n        execution.results.failed++;\r\n        execution.results.errors.push({\r\n          recipientId: recipient.id,\r\n          error: error.message\r\n        });\r\n      }\r\n    });\r\n\r\n    await Promise.allSettled(promises);\r\n  }\r\n\r\n  // Content personalization\r\n  async personalizeContent(campaign: EmailCampaign, recipient: Recipient): Promise<{ subject: string; content: string }> {\r\n    let subject = campaign.subject;\r\n    let content = campaign.content;\r\n\r\n    // Replace personalization tokens\r\n    const tokens = {\r\n      '{{name}}': recipient.name || 'there',\r\n      '{{email}}': recipient.email,\r\n      '{{first_name}}': recipient.firstName || recipient.name?.split(' ')[0] || 'there',\r\n      '{{last_name}}': recipient.lastName || recipient.name?.split(' ').slice(1).join(' ') || '',\r\n      '{{company}}': recipient.company || '',\r\n      '{{unsubscribe_url}}': this.generateUnsubscribeUrl(recipient.id, campaign.id),\r\n      '{{track_open}}': this.generateTrackingPixel(recipient.id, campaign.id),\r\n      '{{date}}': new Date().toLocaleDateString(),\r\n      '{{time}}': new Date().toLocaleTimeString()\r\n    };\r\n\r\n    // Replace tokens in subject and content\r\n    Object.entries(tokens).forEach(([token, value]) => {\r\n      subject = subject.replace(new RegExp(token.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'g'), value);\r\n      content = content.replace(new RegExp(token.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'g'), value);\r\n    });\r\n\r\n    // AI-powered personalization if enabled\r\n    if (campaign.aiPersonalization) {\r\n      const aiPersonalized = await this.aiPersonalizeContent(content, recipient);\r\n      content = aiPersonalized;\r\n    }\r\n\r\n    return { subject, content };\r\n  }\r\n\r\n  // A/B testing\r\n  async createABTest(campaignData: CreateCampaignData, variants: ABTestVariant[]): Promise<ABTest> {\r\n    const abTest: ABTest = {\r\n      id: `abtest_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      name: `A/B Test: ${campaignData.name}`,\r\n      variants: variants.map((variant, index) => ({\r\n        ...variant,\r\n        id: `variant_${index}`,\r\n        allocation: variant.allocation || (100 / variants.length)\r\n      })),\r\n      status: 'running',\r\n      startedAt: new Date().toISOString(),\r\n      metrics: {\r\n        totalSent: 0,\r\n        variants: {}\r\n      }\r\n    };\r\n\r\n    // Create campaigns for each variant\r\n    for (const variant of abTest.variants) {\r\n      const variantCampaign = await this.createCampaign({\r\n        ...campaignData,\r\n        name: `${campaignData.name} - ${variant.name}`,\r\n        subject: variant.subject,\r\n        content: variant.content\r\n      });\r\n      \r\n      variant.campaignId = variantCampaign.id;\r\n    }\r\n\r\n    return abTest;\r\n  }\r\n\r\n  async executeABTest(abTestId: string): Promise<void> {\r\n    const abTest = await this.getABTest(abTestId);\r\n    if (!abTest) return;\r\n\r\n    // Get recipients and split by allocation\r\n    const allRecipients = await this.getRecipients(abTest.variants[0].campaignId);\r\n    const shuffledRecipients = this.shuffleArray(allRecipients);\r\n    \r\n    let currentIndex = 0;\r\n    \r\n    for (const variant of abTest.variants) {\r\n      const variantRecipients = shuffledRecipients.slice(\r\n        currentIndex,\r\n        currentIndex + Math.floor((shuffledRecipients.length * variant.allocation) / 100)\r\n      );\r\n      \r\n      // Execute campaign for this variant\r\n      const campaign = this.campaigns.get(variant.campaignId!);\r\n      if (campaign) {\r\n        await this.executeCampaignForRecipients(campaign, variantRecipients);\r\n      }\r\n      \r\n      currentIndex += variantRecipients.length;\r\n    }\r\n  }\r\n\r\n  // Analytics and reporting\r\n  async getCampaignAnalytics(campaignId: string): Promise<CampaignAnalytics> {\r\n    const campaign = this.campaigns.get(campaignId);\r\n    if (!campaign) throw new Error(`Campaign ${campaignId} not found`);\r\n\r\n    return {\r\n      campaignId,\r\n      metrics: campaign.metrics,\r\n      timeline: await this.getCampaignTimeline(campaignId),\r\n      engagement: await this.getEngagementMetrics(campaignId),\r\n      deliverability: await this.getDeliverabilityMetrics(campaignId)\r\n    };\r\n  }\r\n\r\n  async getAutomationAnalytics(automationId: string): Promise<AutomationAnalytics> {\r\n    const automation = this.automations.get(automationId);\r\n    if (!automation) throw new Error(`Automation ${automationId} not found`);\r\n\r\n    return {\r\n      automationId,\r\n      metrics: automation.metrics,\r\n      flowAnalysis: await this.getFlowAnalysis(automationId),\r\n      conversionFunnel: await this.getConversionFunnel(automationId)\r\n    };\r\n  }\r\n\r\n  // Initialize default triggers\r\n  private initializeDefaultTriggers() {\r\n    // User signup trigger\r\n    this.triggers.set('user_signup', {\r\n      setup: (automationId: string, conditions: any, callback: Function) => {\r\n        this.on('user:signup', (userData) => {\r\n          if (this.evaluateConditions(conditions, userData)) {\r\n            callback(userData.userId, userData);\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    // Purchase trigger\r\n    this.triggers.set('purchase', {\r\n      setup: (automationId: string, conditions: any, callback: Function) => {\r\n        this.on('user:purchase', (purchaseData) => {\r\n          if (this.evaluateConditions(conditions, purchaseData)) {\r\n            callback(purchaseData.userId, purchaseData);\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    // Inactivity trigger\r\n    this.triggers.set('inactivity', {\r\n      setup: (automationId: string, conditions: any, callback: Function) => {\r\n        // Check for inactive users periodically\r\n        setInterval(() => {\r\n          this.checkInactiveUsers(conditions, callback);\r\n        }, 24 * 60 * 60 * 1000); // Daily check\r\n      }\r\n    });\r\n\r\n    // Custom event trigger\r\n    this.triggers.set('custom_event', {\r\n      setup: (automationId: string, conditions: any, callback: Function) => {\r\n        this.on(`custom:${conditions.eventName}`, (eventData) => {\r\n          if (this.evaluateConditions(conditions, eventData)) {\r\n            callback(eventData.userId, eventData);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  // Helper methods\r\n  private scheduleJob(jobId: string, date: Date, callback: Function) {\r\n    const delay = date.getTime() - Date.now();\r\n    if (delay > 0) {\r\n      const timeout = setTimeout(callback, delay);\r\n      this.scheduledJobs.set(jobId, timeout);\r\n    }\r\n  }\r\n\r\n  private cancelScheduledJob(jobId: string) {\r\n    const timeout = this.scheduledJobs.get(jobId);\r\n    if (timeout) {\r\n      clearTimeout(timeout);\r\n      this.scheduledJobs.delete(jobId);\r\n    }\r\n  }\r\n\r\n  private calculateNextExecutionDate(schedule: RecurringSchedule): Date | null {\r\n    const now = new Date();\r\n    \r\n    switch (schedule.frequency) {\r\n      case 'daily':\r\n        return new Date(now.getTime() + 24 * 60 * 60 * 1000);\r\n      case 'weekly':\r\n        const nextWeek = new Date(now);\r\n        nextWeek.setDate(now.getDate() + 7);\r\n        return nextWeek;\r\n      case 'monthly':\r\n        const nextMonth = new Date(now);\r\n        nextMonth.setMonth(now.getMonth() + 1);\r\n        return nextMonth;\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  private chunkArray<T>(array: T[], size: number): T[][] {\r\n    const chunks: T[][] = [];\r\n    for (let i = 0; i < array.length; i += size) {\r\n      chunks.push(array.slice(i, i + size));\r\n    }\r\n    return chunks;\r\n  }\r\n\r\n  private shuffleArray<T>(array: T[]): T[] {\r\n    const shuffled = [...array];\r\n    for (let i = shuffled.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\r\n    }\r\n    return shuffled;\r\n  }\r\n\r\n  private delay(ms: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  private evaluateConditions(conditions: any, data: any): boolean {\r\n    // Simple condition evaluation - extend as needed\r\n    if (!conditions) return true;\r\n    \r\n    for (const [key, value] of Object.entries(conditions)) {\r\n      if (data[key] !== value) return false;\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  // Mock implementations for external services\r\n  private async getRecipients(segment: string, userId?: string): Promise<Recipient[]> {\r\n    // Mock recipient data - replace with actual database query\r\n    return [\r\n      { id: '1', email: 'user1@example.com', name: 'John Doe', firstName: 'John', lastName: 'Doe' },\r\n      { id: '2', email: 'user2@example.com', name: 'Jane Smith', firstName: 'Jane', lastName: 'Smith' }\r\n    ];\r\n  }\r\n\r\n  private async sendEmail(emailData: any): Promise<void> {\r\n    // Mock email sending - replace with actual email service\r\n    console.log('Sending email:', emailData);\r\n    await this.delay(100); // Simulate network delay\r\n  }\r\n\r\n  private generateUnsubscribeUrl(recipientId: string, campaignId: string): string {\r\n    return `${process.env.NEXT_PUBLIC_APP_URL}/unsubscribe?id=${recipientId}&campaign=${campaignId}`;\r\n  }\r\n\r\n  private generateTrackingPixel(recipientId: string, campaignId: string): string {\r\n    return `<img src=\"${process.env.NEXT_PUBLIC_APP_URL}/api/email/track/open?r=${recipientId}&c=${campaignId}\" width=\"1\" height=\"1\" style=\"display:none;\" />`;\r\n  }\r\n\r\n  private async aiPersonalizeContent(content: string, recipient: Recipient): Promise<string> {\r\n    // Mock AI personalization - integrate with actual AI service\r\n    return content;\r\n  }\r\n\r\n  // Cleanup\r\n  destroy() {\r\n    // Clear all scheduled jobs\r\n    for (const timeout of this.scheduledJobs.values()) {\r\n      clearTimeout(timeout);\r\n    }\r\n    this.scheduledJobs.clear();\r\n    \r\n    // Clear all data\r\n    this.campaigns.clear();\r\n    this.automations.clear();\r\n    this.triggers.clear();\r\n    \r\n    // Remove all listeners\r\n    this.removeAllListeners();\r\n  }\r\n}\r\n\r\n// Type definitions\r\ninterface EmailCampaign {\r\n  id: string;\r\n  userId: string;\r\n  name: string;\r\n  type: 'welcome' | 'newsletter' | 'promotional' | 'abandoned-cart' | 're-engagement' | 'product-launch';\r\n  subject: string;\r\n  content: string;\r\n  recipientSegment: string;\r\n  scheduledAt?: Date;\r\n  status: 'draft' | 'scheduled' | 'sending' | 'sent' | 'paused' | 'failed';\r\n  aiPersonalization?: boolean;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  metrics: {\r\n    sent: number;\r\n    delivered: number;\r\n    opened: number;\r\n    clicked: number;\r\n    bounced: number;\r\n    unsubscribed: number;\r\n  };\r\n}\r\n\r\ninterface EmailAutomation {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n  triggers: AutomationTrigger[];\r\n  actions: AutomationAction[];\r\n  status: 'active' | 'paused' | 'draft';\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  metrics: {\r\n    triggered: number;\r\n    completed: number;\r\n    active: number;\r\n  };\r\n}\r\n\r\ninterface AutomationTrigger {\r\n  type: 'user_signup' | 'purchase' | 'inactivity' | 'custom_event';\r\n  conditions: any;\r\n  delay?: number;\r\n}\r\n\r\ninterface AutomationAction {\r\n  type: 'send_email' | 'add_tag' | 'update_field' | 'webhook';\r\n  data: any;\r\n  delay?: number;\r\n}\r\n\r\ninterface TriggerHandler {\r\n  setup: (automationId: string, conditions: any, callback: Function) => void;\r\n}\r\n\r\ninterface CreateCampaignData {\r\n  userId: string;\r\n  name: string;\r\n  type: EmailCampaign['type'];\r\n  subject: string;\r\n  content: string;\r\n  recipientSegment: string;\r\n  scheduledAt?: Date;\r\n  aiPersonalization?: boolean;\r\n}\r\n\r\ninterface CreateAutomationData {\r\n  name: string;\r\n  description?: string;\r\n  triggers: AutomationTrigger[];\r\n  actions: AutomationAction[];\r\n}\r\n\r\ninterface RecurringSchedule {\r\n  frequency: 'daily' | 'weekly' | 'monthly';\r\n  time?: string;\r\n  dayOfWeek?: number;\r\n  dayOfMonth?: number;\r\n}\r\n\r\ninterface CampaignExecution {\r\n  campaignId: string;\r\n  startedAt: string;\r\n  completedAt?: string;\r\n  status: 'running' | 'completed' | 'failed';\r\n  results: {\r\n    processed: number;\r\n    sent: number;\r\n    failed: number;\r\n    errors: Array<{ recipientId: string; error: string }>;\r\n  };\r\n  error?: string;\r\n}\r\n\r\ninterface Recipient {\r\n  id: string;\r\n  email: string;\r\n  name?: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n  company?: string;\r\n}\r\n\r\ninterface ABTest {\r\n  id: string;\r\n  name: string;\r\n  variants: ABTestVariant[];\r\n  status: 'running' | 'completed' | 'paused';\r\n  startedAt: string;\r\n  completedAt?: string;\r\n  metrics: {\r\n    totalSent: number;\r\n    variants: Record<string, any>;\r\n  };\r\n}\r\n\r\ninterface ABTestVariant {\r\n  id?: string;\r\n  name: string;\r\n  subject: string;\r\n  content: string;\r\n  allocation: number;\r\n  campaignId?: string;\r\n}\r\n\r\ninterface CampaignAnalytics {\r\n  campaignId: string;\r\n  metrics: EmailCampaign['metrics'];\r\n  timeline: any[];\r\n  engagement: any;\r\n  deliverability: any;\r\n}\r\n\r\ninterface AutomationAnalytics {\r\n  automationId: string;\r\n  metrics: EmailAutomation['metrics'];\r\n  flowAnalysis: any;\r\n  conversionFunnel: any;\r\n}\r\n\r\n// Export singleton instance\r\nexport const emailAutomationEngine = new EmailAutomationEngine();"],"names":["EmailAutomationEngine","emailAutomationEngine","EventEmitter","campaigns","Map","automations","scheduledJobs","triggers","initializeDefaultTriggers","createCampaign","campaignData","campaign","id","Date","now","Math","random","toString","substr","status","createdAt","toISOString","updatedAt","metrics","sent","delivered","opened","clicked","bounced","unsubscribed","set","scheduledAt","scheduleJob","executeCampaign","emit","updateCampaign","campaignId","updates","get","updatedCampaign","cancelScheduledJob","deleteCampaign","delete","createAutomation","automationData","automation","triggered","completed","active","setupAutomationTriggers","triggerAutomation","automationId","userId","triggerData","execution","executeAutomationWorkflow","success","scheduleRecurringCampaign","schedule","recurringId","scheduleNextExecution","nextDate","calculateNextExecutionDate","getTime","instanceCampaign","name","toDateString","forEach","trigger","handler","type","setup","conditions","data","Error","startedAt","results","processed","failed","errors","recipients","getRecipients","recipientSegment","batchSize","batches","chunkArray","batch","processBatch","delay","completedAt","error","message","promises","map","recipient","personalizedContent","personalizeContent","sendEmail","to","email","subject","content","recipientId","push","Promise","allSettled","tokens","firstName","split","lastName","slice","join","company","generateUnsubscribeUrl","generateTrackingPixel","toLocaleDateString","toLocaleTimeString","Object","entries","token","value","replace","RegExp","aiPersonalization","aiPersonalized","aiPersonalizeContent","createABTest","variants","abTest","variant","index","allocation","length","totalSent","variantCampaign","executeABTest","abTestId","getABTest","allRecipients","shuffledRecipients","shuffleArray","currentIndex","variantRecipients","floor","executeCampaignForRecipients","getCampaignAnalytics","timeline","getCampaignTimeline","engagement","getEngagementMetrics","deliverability","getDeliverabilityMetrics","getAutomationAnalytics","flowAnalysis","getFlowAnalysis","conversionFunnel","getConversionFunnel","callback","on","userData","evaluateConditions","purchaseData","setInterval","checkInactiveUsers","eventName","eventData","jobId","date","timeout","setTimeout","clearTimeout","frequency","nextWeek","setDate","getDate","nextMonth","setMonth","getMonth","array","size","chunks","i","shuffled","j","ms","resolve","key","segment","emailData","console","log","process","env","NEXT_PUBLIC_APP_URL","destroy","values","clear","removeAllListeners"],"mappings":"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"}