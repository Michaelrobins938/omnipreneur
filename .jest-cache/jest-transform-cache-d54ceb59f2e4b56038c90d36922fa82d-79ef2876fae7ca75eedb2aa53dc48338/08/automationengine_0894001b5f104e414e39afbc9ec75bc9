0300af6bdeeacab87c6e94ec4381f8f9
// @ts-nocheck
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get EmailAutomationEngine () {
        return EmailAutomationEngine;
    },
    get emailAutomationEngine () {
        return emailAutomationEngine;
    }
});
const _events = require("events");
class EmailAutomationEngine extends _events.EventEmitter {
    constructor(){
        super(), this.campaigns = new Map(), this.automations = new Map(), this.scheduledJobs = new Map(), this.triggers = new Map();
        this.initializeDefaultTriggers();
    }
    // Campaign management
    async createCampaign(campaignData) {
        const campaign = {
            id: `campaign_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            ...campaignData,
            status: 'draft',
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
            metrics: {
                sent: 0,
                delivered: 0,
                opened: 0,
                clicked: 0,
                bounced: 0,
                unsubscribed: 0
            }
        };
        this.campaigns.set(campaign.id, campaign);
        // If scheduled, set up the job
        if (campaign.scheduledAt && campaign.scheduledAt > new Date()) {
            this.scheduleJob(campaign.id, campaign.scheduledAt, ()=>{
                this.executeCampaign(campaign.id);
            });
        }
        this.emit('campaign:created', campaign);
        return campaign;
    }
    async updateCampaign(campaignId, updates) {
        const campaign = this.campaigns.get(campaignId);
        if (!campaign) return null;
        const updatedCampaign = {
            ...campaign,
            ...updates,
            updatedAt: new Date().toISOString()
        };
        this.campaigns.set(campaignId, updatedCampaign);
        // Update scheduling if needed
        if (updates.scheduledAt) {
            this.cancelScheduledJob(campaignId);
            if (updates.scheduledAt > new Date()) {
                this.scheduleJob(campaignId, updates.scheduledAt, ()=>{
                    this.executeCampaign(campaignId);
                });
            }
        }
        this.emit('campaign:updated', updatedCampaign);
        return updatedCampaign;
    }
    async deleteCampaign(campaignId) {
        const campaign = this.campaigns.get(campaignId);
        if (!campaign) return false;
        // Cancel scheduled job if exists
        this.cancelScheduledJob(campaignId);
        // Remove from campaigns
        this.campaigns.delete(campaignId);
        this.emit('campaign:deleted', {
            campaignId
        });
        return true;
    }
    // Automation workflows
    async createAutomation(automationData) {
        const automation = {
            id: `automation_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            ...automationData,
            status: 'active',
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
            metrics: {
                triggered: 0,
                completed: 0,
                active: 0
            }
        };
        this.automations.set(automation.id, automation);
        // Set up triggers
        this.setupAutomationTriggers(automation);
        this.emit('automation:created', automation);
        return automation;
    }
    async triggerAutomation(automationId, userId, triggerData = {}) {
        const automation = this.automations.get(automationId);
        if (!automation || automation.status !== 'active') return false;
        // Execute automation workflow
        const execution = await this.executeAutomationWorkflow(automation, userId, triggerData);
        // Update metrics
        automation.metrics.triggered++;
        this.automations.set(automationId, automation);
        this.emit('automation:triggered', {
            automation,
            userId,
            triggerData,
            execution
        });
        return execution.success;
    }
    // Advanced scheduling
    async scheduleRecurringCampaign(campaignData, schedule) {
        const recurringId = `recurring_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const scheduleNextExecution = ()=>{
            const nextDate = this.calculateNextExecutionDate(schedule);
            if (nextDate) {
                this.scheduleJob(`${recurringId}_${nextDate.getTime()}`, nextDate, async ()=>{
                    // Create and execute campaign instance
                    const instanceCampaign = await this.createCampaign({
                        ...campaignData,
                        name: `${campaignData.name} - ${nextDate.toDateString()}`,
                        scheduledAt: nextDate
                    });
                    await this.executeCampaign(instanceCampaign.id);
                    // Schedule next execution
                    scheduleNextExecution();
                });
            }
        };
        scheduleNextExecution();
        return recurringId;
    }
    // Trigger-based automation
    setupAutomationTriggers(automation) {
        automation.triggers.forEach((trigger)=>{
            const handler = this.triggers.get(trigger.type);
            if (handler) {
                handler.setup(automation.id, trigger.conditions, (userId, data)=>{
                    this.triggerAutomation(automation.id, userId, data);
                });
            }
        });
    }
    // Campaign execution
    async executeCampaign(campaignId) {
        const campaign = this.campaigns.get(campaignId);
        if (!campaign) {
            throw new Error(`Campaign ${campaignId} not found`);
        }
        const execution = {
            campaignId,
            startedAt: new Date().toISOString(),
            status: 'running',
            results: {
                processed: 0,
                sent: 0,
                failed: 0,
                errors: []
            }
        };
        try {
            // Update campaign status
            campaign.status = 'sending';
            this.campaigns.set(campaignId, campaign);
            // Get recipient list
            const recipients = await this.getRecipients(campaign.recipientSegment, campaign.userId);
            // Execute in batches to avoid overwhelming email service
            const batchSize = 100;
            const batches = this.chunkArray(recipients, batchSize);
            for (const batch of batches){
                await this.processBatch(campaign, batch, execution);
                // Add delay between batches
                await this.delay(1000);
            }
            // Update final status
            execution.status = 'completed';
            execution.completedAt = new Date().toISOString();
            campaign.status = 'sent';
            campaign.metrics.sent = execution.results.sent;
            this.campaigns.set(campaignId, campaign);
        } catch (error) {
            execution.status = 'failed';
            execution.error = error.message;
            campaign.status = 'failed';
            this.campaigns.set(campaignId, campaign);
        }
        this.emit('campaign:executed', {
            campaign,
            execution
        });
        return execution;
    }
    // Batch processing for email sending
    async processBatch(campaign, recipients, execution) {
        const promises = recipients.map(async (recipient)=>{
            try {
                execution.results.processed++;
                // Personalize content
                const personalizedContent = await this.personalizeContent(campaign, recipient);
                // Send email
                await this.sendEmail({
                    to: recipient.email,
                    subject: personalizedContent.subject,
                    content: personalizedContent.content,
                    campaignId: campaign.id,
                    recipientId: recipient.id
                });
                execution.results.sent++;
            } catch (error) {
                execution.results.failed++;
                execution.results.errors.push({
                    recipientId: recipient.id,
                    error: error.message
                });
            }
        });
        await Promise.allSettled(promises);
    }
    // Content personalization
    async personalizeContent(campaign, recipient) {
        let subject = campaign.subject;
        let content = campaign.content;
        // Replace personalization tokens
        const tokens = {
            '{{name}}': recipient.name || 'there',
            '{{email}}': recipient.email,
            '{{first_name}}': recipient.firstName || recipient.name?.split(' ')[0] || 'there',
            '{{last_name}}': recipient.lastName || recipient.name?.split(' ').slice(1).join(' ') || '',
            '{{company}}': recipient.company || '',
            '{{unsubscribe_url}}': this.generateUnsubscribeUrl(recipient.id, campaign.id),
            '{{track_open}}': this.generateTrackingPixel(recipient.id, campaign.id),
            '{{date}}': new Date().toLocaleDateString(),
            '{{time}}': new Date().toLocaleTimeString()
        };
        // Replace tokens in subject and content
        Object.entries(tokens).forEach(([token, value])=>{
            subject = subject.replace(new RegExp(token.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), value);
            content = content.replace(new RegExp(token.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), value);
        });
        // AI-powered personalization if enabled
        if (campaign.aiPersonalization) {
            const aiPersonalized = await this.aiPersonalizeContent(content, recipient);
            content = aiPersonalized;
        }
        return {
            subject,
            content
        };
    }
    // A/B testing
    async createABTest(campaignData, variants) {
        const abTest = {
            id: `abtest_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            name: `A/B Test: ${campaignData.name}`,
            variants: variants.map((variant, index)=>({
                    ...variant,
                    id: `variant_${index}`,
                    allocation: variant.allocation || 100 / variants.length
                })),
            status: 'running',
            startedAt: new Date().toISOString(),
            metrics: {
                totalSent: 0,
                variants: {}
            }
        };
        // Create campaigns for each variant
        for (const variant of abTest.variants){
            const variantCampaign = await this.createCampaign({
                ...campaignData,
                name: `${campaignData.name} - ${variant.name}`,
                subject: variant.subject,
                content: variant.content
            });
            variant.campaignId = variantCampaign.id;
        }
        return abTest;
    }
    async executeABTest(abTestId) {
        const abTest = await this.getABTest(abTestId);
        if (!abTest) return;
        // Get recipients and split by allocation
        const allRecipients = await this.getRecipients(abTest.variants[0].campaignId);
        const shuffledRecipients = this.shuffleArray(allRecipients);
        let currentIndex = 0;
        for (const variant of abTest.variants){
            const variantRecipients = shuffledRecipients.slice(currentIndex, currentIndex + Math.floor(shuffledRecipients.length * variant.allocation / 100));
            // Execute campaign for this variant
            const campaign = this.campaigns.get(variant.campaignId);
            if (campaign) {
                await this.executeCampaignForRecipients(campaign, variantRecipients);
            }
            currentIndex += variantRecipients.length;
        }
    }
    // Analytics and reporting
    async getCampaignAnalytics(campaignId) {
        const campaign = this.campaigns.get(campaignId);
        if (!campaign) throw new Error(`Campaign ${campaignId} not found`);
        return {
            campaignId,
            metrics: campaign.metrics,
            timeline: await this.getCampaignTimeline(campaignId),
            engagement: await this.getEngagementMetrics(campaignId),
            deliverability: await this.getDeliverabilityMetrics(campaignId)
        };
    }
    async getAutomationAnalytics(automationId) {
        const automation = this.automations.get(automationId);
        if (!automation) throw new Error(`Automation ${automationId} not found`);
        return {
            automationId,
            metrics: automation.metrics,
            flowAnalysis: await this.getFlowAnalysis(automationId),
            conversionFunnel: await this.getConversionFunnel(automationId)
        };
    }
    // Initialize default triggers
    initializeDefaultTriggers() {
        // User signup trigger
        this.triggers.set('user_signup', {
            setup: (automationId, conditions, callback)=>{
                this.on('user:signup', (userData)=>{
                    if (this.evaluateConditions(conditions, userData)) {
                        callback(userData.userId, userData);
                    }
                });
            }
        });
        // Purchase trigger
        this.triggers.set('purchase', {
            setup: (automationId, conditions, callback)=>{
                this.on('user:purchase', (purchaseData)=>{
                    if (this.evaluateConditions(conditions, purchaseData)) {
                        callback(purchaseData.userId, purchaseData);
                    }
                });
            }
        });
        // Inactivity trigger
        this.triggers.set('inactivity', {
            setup: (automationId, conditions, callback)=>{
                // Check for inactive users periodically
                setInterval(()=>{
                    this.checkInactiveUsers(conditions, callback);
                }, 24 * 60 * 60 * 1000); // Daily check
            }
        });
        // Custom event trigger
        this.triggers.set('custom_event', {
            setup: (automationId, conditions, callback)=>{
                this.on(`custom:${conditions.eventName}`, (eventData)=>{
                    if (this.evaluateConditions(conditions, eventData)) {
                        callback(eventData.userId, eventData);
                    }
                });
            }
        });
    }
    // Helper methods
    scheduleJob(jobId, date, callback) {
        const delay = date.getTime() - Date.now();
        if (delay > 0) {
            const timeout = setTimeout(callback, delay);
            this.scheduledJobs.set(jobId, timeout);
        }
    }
    cancelScheduledJob(jobId) {
        const timeout = this.scheduledJobs.get(jobId);
        if (timeout) {
            clearTimeout(timeout);
            this.scheduledJobs.delete(jobId);
        }
    }
    calculateNextExecutionDate(schedule) {
        const now = new Date();
        switch(schedule.frequency){
            case 'daily':
                return new Date(now.getTime() + 24 * 60 * 60 * 1000);
            case 'weekly':
                const nextWeek = new Date(now);
                nextWeek.setDate(now.getDate() + 7);
                return nextWeek;
            case 'monthly':
                const nextMonth = new Date(now);
                nextMonth.setMonth(now.getMonth() + 1);
                return nextMonth;
            default:
                return null;
        }
    }
    chunkArray(array, size) {
        const chunks = [];
        for(let i = 0; i < array.length; i += size){
            chunks.push(array.slice(i, i + size));
        }
        return chunks;
    }
    shuffleArray(array) {
        const shuffled = [
            ...array
        ];
        for(let i = shuffled.length - 1; i > 0; i--){
            const j = Math.floor(Math.random() * (i + 1));
            [shuffled[i], shuffled[j]] = [
                shuffled[j],
                shuffled[i]
            ];
        }
        return shuffled;
    }
    delay(ms) {
        return new Promise((resolve)=>setTimeout(resolve, ms));
    }
    evaluateConditions(conditions, data) {
        // Simple condition evaluation - extend as needed
        if (!conditions) return true;
        for (const [key, value] of Object.entries(conditions)){
            if (data[key] !== value) return false;
        }
        return true;
    }
    // Mock implementations for external services
    async getRecipients(segment, userId) {
        // Mock recipient data - replace with actual database query
        return [
            {
                id: '1',
                email: 'user1@example.com',
                name: 'John Doe',
                firstName: 'John',
                lastName: 'Doe'
            },
            {
                id: '2',
                email: 'user2@example.com',
                name: 'Jane Smith',
                firstName: 'Jane',
                lastName: 'Smith'
            }
        ];
    }
    async sendEmail(emailData) {
        // Mock email sending - replace with actual email service
        console.log('Sending email:', emailData);
        await this.delay(100); // Simulate network delay
    }
    generateUnsubscribeUrl(recipientId, campaignId) {
        return `${process.env.NEXT_PUBLIC_APP_URL}/unsubscribe?id=${recipientId}&campaign=${campaignId}`;
    }
    generateTrackingPixel(recipientId, campaignId) {
        return `<img src="${process.env.NEXT_PUBLIC_APP_URL}/api/email/track/open?r=${recipientId}&c=${campaignId}" width="1" height="1" style="display:none;" />`;
    }
    async aiPersonalizeContent(content, recipient) {
        // Mock AI personalization - integrate with actual AI service
        return content;
    }
    // Cleanup
    destroy() {
        // Clear all scheduled jobs
        for (const timeout of this.scheduledJobs.values()){
            clearTimeout(timeout);
        }
        this.scheduledJobs.clear();
        // Clear all data
        this.campaigns.clear();
        this.automations.clear();
        this.triggers.clear();
        // Remove all listeners
        this.removeAllListeners();
    }
}
const emailAutomationEngine = new EmailAutomationEngine();

//# sourceMappingURL=data:application/json;base64,