{"version":3,"sources":["C:\\Users\\Micha\\Favorites\\Downloads\\omnipreneur\\__tests__\\components\\dashboard\\RealTimeAnalytics.test.tsx"],"sourcesContent":["// @ts-nocheck\r\nimport React from 'react'\r\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\r\nimport RealTimeAnalytics from '@/app/components/dashboard/RealTimeAnalytics'\r\n\r\n// Mock fetch\r\nglobal.fetch = jest.fn()\r\n\r\n// Mock WebSocket\r\nconst mockWebSocket = {\r\n  send: jest.fn(),\r\n  close: jest.fn(),\r\n  addEventListener: jest.fn(),\r\n  removeEventListener: jest.fn(),\r\n  readyState: 1\r\n}\r\n\r\nglobal.WebSocket = jest.fn().mockImplementation(() => mockWebSocket)\r\n\r\n// Mock localStorage\r\nconst mockLocalStorage = {\r\n  getItem: jest.fn(),\r\n  setItem: jest.fn(),\r\n  removeItem: jest.fn(),\r\n  clear: jest.fn()\r\n}\r\n\r\nObject.defineProperty(window, 'localStorage', {\r\n  value: mockLocalStorage\r\n})\r\n\r\ndescribe('RealTimeAnalytics Component', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks()\r\n    mockLocalStorage.getItem.mockReturnValue('test_token')\r\n    \r\n    // Mock successful API response\r\n    ;(global.fetch as jest.Mock).mockResolvedValue({\r\n      ok: true,\r\n      json: () => Promise.resolve({\r\n        success: true,\r\n        data: {\r\n          realtime: {\r\n            totalEvents: 150,\r\n            events: [\r\n              { event: 'page_view', timestamp: new Date().toISOString() },\r\n              { event: 'user_action', timestamp: new Date().toISOString() }\r\n            ],\r\n            metrics: {\r\n              userActions: 25,\r\n              productUsage: 15,\r\n              revenue: 150.00,\r\n              uniqueProducts: 3\r\n            },\r\n            trends: {\r\n              growth: 12.5,\r\n              hourly: { 10: 5, 11: 8, 12: 12 }\r\n            }\r\n          },\r\n          dashboard: {\r\n            activeUsers: 42,\r\n            revenueToday: 250.75,\r\n            conversionRate: 3.2,\r\n            topProducts: [\r\n              { productId: 'bundle-builder', usage: 25 },\r\n              { productId: 'content-spawner', usage: 18 }\r\n            ],\r\n            recentActivity: [\r\n              { event: 'bundle_created', timestamp: new Date().toISOString() },\r\n              { event: 'campaign_sent', timestamp: new Date().toISOString() }\r\n            ],\r\n            performanceMetrics: {\r\n              avgResponseTime: 95,\r\n              successRate: 99.2,\r\n              errorRate: 0.8\r\n            },\r\n            realTimeStats: {\r\n              sessionsActive: 28,\r\n              eventsPerMinute: 45,\r\n              currentLoad: 65\r\n            }\r\n          },\r\n          timestamp: new Date().toISOString()\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  it('should render loading state initially', () => {\r\n    render(<RealTimeAnalytics />)\r\n    \r\n    expect(screen.getByText('Loading real-time analytics...')).toBeInTheDocument()\r\n  })\r\n\r\n  it('should render analytics data after loading', async () => {\r\n    render(<RealTimeAnalytics />)\r\n    \r\n    await waitFor(() => {\r\n      expect(screen.getByText('Real-Time Analytics')).toBeInTheDocument()\r\n    })\r\n\r\n    // Check key metrics are displayed\r\n    expect(screen.getByText('42')).toBeInTheDocument() // Active Users\r\n    expect(screen.getByText('$250.75')).toBeInTheDocument() // Revenue Today\r\n    expect(screen.getByText('3.2%')).toBeInTheDocument() // Conversion Rate\r\n    expect(screen.getByText('45')).toBeInTheDocument() // Events/Min\r\n  })\r\n\r\n  it('should show correct connection status', async () => {\r\n    render(<RealTimeAnalytics />)\r\n    \r\n    await waitFor(() => {\r\n      expect(screen.getByText('connecting')).toBeInTheDocument()\r\n    })\r\n  })\r\n\r\n  it('should display performance metrics', async () => {\r\n    render(<RealTimeAnalytics />)\r\n    \r\n    await waitFor(() => {\r\n      expect(screen.getByText('Performance Metrics')).toBeInTheDocument()\r\n    })\r\n\r\n    expect(screen.getByText('95ms')).toBeInTheDocument() // Response Time\r\n    expect(screen.getByText('99.2%')).toBeInTheDocument() // Success Rate\r\n    expect(screen.getByText('0.8%')).toBeInTheDocument() // Error Rate\r\n  })\r\n\r\n  it('should display system status', async () => {\r\n    render(<RealTimeAnalytics />)\r\n    \r\n    await waitFor(() => {\r\n      expect(screen.getByText('System Status')).toBeInTheDocument()\r\n    })\r\n\r\n    expect(screen.getByText('28')).toBeInTheDocument() // Active Sessions\r\n    expect(screen.getByText('65%')).toBeInTheDocument() // System Load\r\n  })\r\n\r\n  it('should display recent activity', async () => {\r\n    render(<RealTimeAnalytics />)\r\n    \r\n    await waitFor(() => {\r\n      expect(screen.getByText('Recent Activity')).toBeInTheDocument()\r\n    })\r\n\r\n    // Should show recent events (mocked events may not have exact text)\r\n    const activitySection = screen.getByText('Recent Activity').closest('div')\r\n    expect(activitySection).toBeInTheDocument()\r\n  })\r\n\r\n  it('should show trend indicators', async () => {\r\n    render(<RealTimeAnalytics />)\r\n    \r\n    await waitFor(() => {\r\n      // Should show trending up icons for positive trends\r\n      const trendIcons = screen.getAllByTestId('trending-up-icon')\r\n      expect(trendIcons.length).toBeGreaterThan(0)\r\n    })\r\n  })\r\n\r\n  it('should handle WebSocket connection', async () => {\r\n    render(<RealTimeAnalytics />)\r\n    \r\n    await waitFor(() => {\r\n      expect(global.WebSocket).toHaveBeenCalled()\r\n    })\r\n\r\n    // Should create WebSocket with correct URL format\r\n    const wsCall = (global.WebSocket as jest.Mock).mock.calls[0]\r\n    expect(wsCall[0]).toMatch(/ws.*\\/api\\/analytics\\/websocket\\?token=/)\r\n  })\r\n\r\n  it('should send test event when debug button clicked', async () => {\r\n    render(<RealTimeAnalytics />)\r\n    \r\n    await waitFor(() => {\r\n      expect(screen.getByText('Send Test Event')).toBeInTheDocument()\r\n    })\r\n\r\n    const testButton = screen.getByText('Send Test Event')\r\n    fireEvent.click(testButton)\r\n\r\n    // Should send WebSocket message\r\n    expect(mockWebSocket.send).toHaveBeenCalledWith(\r\n      expect.stringContaining('track_event')\r\n    )\r\n  })\r\n\r\n  it('should handle fetch errors gracefully', async () => {\r\n    ;(global.fetch as jest.Mock).mockRejectedValue(new Error('Network error'))\r\n\r\n    const consoleSpy = jest.spyOn(console, 'error').mockImplementation()\r\n    \r\n    render(<RealTimeAnalytics />)\r\n    \r\n    await waitFor(() => {\r\n      expect(consoleSpy).toHaveBeenCalledWith(\r\n        'Failed to fetch initial analytics data:',\r\n        expect.any(Error)\r\n      )\r\n    })\r\n\r\n    consoleSpy.mockRestore()\r\n  })\r\n\r\n  it('should handle WebSocket errors gracefully', async () => {\r\n    const consoleSpy = jest.spyOn(console, 'error').mockImplementation()\r\n    \r\n    render(<RealTimeAnalytics />)\r\n    \r\n    // Simulate WebSocket error\r\n    const wsInstance = (global.WebSocket as jest.Mock).mock.results[0].value\r\n    wsInstance.onerror?.(new Error('WebSocket error'))\r\n\r\n    await waitFor(() => {\r\n      expect(consoleSpy).toHaveBeenCalled()\r\n    })\r\n\r\n    consoleSpy.mockRestore()\r\n  })\r\n\r\n  it('should update metrics in real-time', async () => {\r\n    render(<RealTimeAnalytics />)\r\n    \r\n    await waitFor(() => {\r\n      expect(screen.getByText('42')).toBeInTheDocument()\r\n    })\r\n\r\n    // Simulate WebSocket message with updated metrics\r\n    const wsInstance = (global.WebSocket as jest.Mock).mock.results[0].value\r\n    wsInstance.onmessage?.({\r\n      data: JSON.stringify({\r\n        type: 'metrics_update',\r\n        payload: {\r\n          activeUsers: 50,\r\n          revenueToday: 300.00\r\n        },\r\n        timestamp: new Date().toISOString()\r\n      })\r\n    })\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('50')).toBeInTheDocument()\r\n      expect(screen.getByText('$300.00')).toBeInTheDocument()\r\n    })\r\n  })\r\n\r\n  it('should handle WebSocket messages correctly', async () => {\r\n    render(<RealTimeAnalytics />)\r\n    \r\n    await waitFor(() => {\r\n      expect(global.WebSocket).toHaveBeenCalled()\r\n    })\r\n\r\n    const wsInstance = (global.WebSocket as jest.Mock).mock.results[0].value\r\n\r\n    // Test different message types\r\n    wsInstance.onmessage?.({\r\n      data: JSON.stringify({\r\n        type: 'connected',\r\n        payload: { userId: 'user_123' }\r\n      })\r\n    })\r\n\r\n    wsInstance.onmessage?.({\r\n      data: JSON.stringify({\r\n        type: 'analytics_update',\r\n        payload: {\r\n          event: 'new_signup',\r\n          timestamp: new Date().toISOString()\r\n        }\r\n      })\r\n    })\r\n\r\n    wsInstance.onmessage?.({\r\n      data: JSON.stringify({\r\n        type: 'error',\r\n        message: 'Test error'\r\n      })\r\n    })\r\n\r\n    // Should handle all message types without errors\r\n    expect(true).toBe(true)\r\n  })\r\n\r\n  it('should retry WebSocket connection on failure', async () => {\r\n    jest.useFakeTimers()\r\n    \r\n    render(<RealTimeAnalytics />)\r\n    \r\n    const wsInstance = (global.WebSocket as jest.Mock).mock.results[0].value\r\n    \r\n    // Simulate connection close\r\n    wsInstance.onclose?.()\r\n\r\n    // Fast-forward timers to trigger retry\r\n    jest.advanceTimersByTime(5000)\r\n\r\n    expect(global.WebSocket).toHaveBeenCalledTimes(2)\r\n    \r\n    jest.useRealTimers()\r\n  })\r\n\r\n  it('should cleanup on unmount', () => {\r\n    const { unmount } = render(<RealTimeAnalytics />)\r\n    \r\n    unmount()\r\n\r\n    expect(mockWebSocket.close).toHaveBeenCalled()\r\n  })\r\n})"],"names":["global","fetch","jest","fn","mockWebSocket","send","close","addEventListener","removeEventListener","readyState","WebSocket","mockImplementation","mockLocalStorage","getItem","setItem","removeItem","clear","Object","defineProperty","window","value","describe","beforeEach","clearAllMocks","mockReturnValue","mockResolvedValue","ok","json","Promise","resolve","success","data","realtime","totalEvents","events","event","timestamp","Date","toISOString","metrics","userActions","productUsage","revenue","uniqueProducts","trends","growth","hourly","dashboard","activeUsers","revenueToday","conversionRate","topProducts","productId","usage","recentActivity","performanceMetrics","avgResponseTime","successRate","errorRate","realTimeStats","sessionsActive","eventsPerMinute","currentLoad","it","render","RealTimeAnalytics","expect","screen","getByText","toBeInTheDocument","waitFor","activitySection","closest","trendIcons","getAllByTestId","length","toBeGreaterThan","toHaveBeenCalled","wsCall","mock","calls","toMatch","testButton","fireEvent","click","toHaveBeenCalledWith","stringContaining","mockRejectedValue","Error","consoleSpy","spyOn","console","any","mockRestore","wsInstance","results","onerror","onmessage","JSON","stringify","type","payload","userId","message","toBe","useFakeTimers","onclose","advanceTimersByTime","toHaveBeenCalledTimes","useRealTimers","unmount"],"mappings":"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"}